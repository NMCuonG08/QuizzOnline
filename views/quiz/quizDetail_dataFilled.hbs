<link rel="stylesheet" href="/css/quizDetail.css"/> {{!-- Ensure this CSS path is correct --}}
<!-- Add SweetAlert2 library -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<body>
  <div class="main-content">
    <div class="container">
      <div class="quiz-header">
        {{!-- Use quiz cover image, fallback to placeholder --}}
        <img
          src="{{#if quiz.coverImageUrl}}{{quiz.coverImageUrl}}{{else}}https://placehold.co/600x300/3498db/FFFFFF?text=Quiz+Image{{/if}}"
          alt="Quiz Image for {{quiz.title}}"
        />
        <h2 class="quiz-title">{{quiz.title}}</h2>
      </div>

      {{!-- Display Stats --}}
      <div class="quiz-stats">
        <div class="stat-item">
          <div class="stat-value">{{stats.playerCount}}</div>
          <div class="stat-label">Người chơi</div>
        </div>
        <div class="stat-item">
          <div class="stat-value">{{stats.averageRating}}</div>
          <div class="stat-label">Đánh giá</div>
        </div>
        <div class="stat-item">
          <div class="stat-value">{{stats.questionCount}}</div>
          <div class="stat-label">Câu hỏi</div>
        </div>
        <div class="stat-item">
          {{!-- Using estimated time based on question count --}}
          <div class="stat-value">~{{stats.estimatedMinutes}}m</div>
          <div class="stat-label">Thời gian</div>
        </div>
      </div>

      <div class="quiz-details">
        <div class="rating">
          {{!-- You would ideally use a Handlebars helper here to generate star icons based on stats.averageRating --}}
          {{!-- Simple display for now: --}}
           {{{stars stats.averageRating }}} <span class="rating-count text-secondary">{{rating.count}} lượt đánh giá</span> {{!-- Assuming stats.ratingCount is the number of ratings --}}
        </div>
        <h3 class="description-title">
          <i class="fas fa-info-circle"></i> Mô tả
        </h3>
        <p class="description-text">
         {{quiz.description}}
        </p>

        {{!-- Display Tags --}}
        <div class="quiz-tags">
          {{#each quiz.tags}}
            <span class="quiz-tag"><i class="fas fa-tag"></i> {{this.name}}</span> {{!-- Added generic tag icon --}}
          {{/each}}
           {{!-- You could add Category here too if fetched: --}}
           {{!-- {{#if quiz.categoryName}}<span class="quiz-tag"><i class="fas fa-folder"></i> {{quiz.categoryName}}</span>{{/if}} --}}
        </div>

        {{!-- The Start button likely links to the quiz taking page --}}
        <button class="start-button" onclick="location.href='/quiz/do-test/{{quiz.id}}'"> {{!-- Example Link --}}
          <i class="fas fa-play"></i> Bắt đầu ngay!
        </button>

        <div class="quiz-info">
          <span><i class="far fa-question-circle"></i> {{stats.questionCount}} câu hỏi</span>
          <span><i class="fas fa-users"></i> {{stats.playerCount}} người chơi</span>
          <span><i class="far fa-clock"></i> ~{{stats.estimatedMinutes}} phút</span>
        </div>
      </div>

      {{!-- Comments Section --}}
      <div class="comments-section">
        <h3 class="comments-title">
           {{!-- Dynamically update comment count --}}
          <i class="far fa-comment-dots"></i> Bình luận ({{comments.length}})
        </h3>

        <div class="comments-list">
          {{#each comments}}
          <div class="comment-item">
            <div class="comment-avatar">
              {{#if this.authorAvatarUrl}}
                <img src="{{this.authorAvatarUrl}}" alt="{{this.authorUsername}} avatar" style="width: 100%; height: 100%; border-radius: 50%;">
              {{else}}
                {{this.authorInitials}} {{!-- Fallback to initials --}}
              {{/if}}
            </div>
            <div class="comment-content">
              <div class="comment-header">
                <span class="comment-author">{{this.authorUsername}}</span>
                {{!-- Cannot display relative time as 'created_at' is missing from comment table schema --}}
                {{!-- <span class="comment-time">{{this.relativeTime}}</span> --}}
              </div>
              <p class="comment-text">
                {{this.message}}
              </p>
            </div>
          </div>
          {{else}}
           <p>Chưa có bình luận nào.</p> {{!-- Message when no comments exist --}}
          {{/each}}
        </div>

        {{!-- Comment Form - Client-side JS handles submission --}}
         {{!-- IMPORTANT: The existing JS needs to send data to a backend endpoint --}}
        <form class="comment-form" onsubmit="handleCommentSubmit(event, {{quiz.id}})"> {{!-- Pass quizId if needed --}}
          <input
            type="text"
            class="comment-input"
            placeholder="Thêm bình luận của bạn..."
            id="commentInput"
          />
          <button type="submit" class="comment-submit" id="commentSubmit" disabled>
            Gửi
          </button>
        </form>
      </div>
    </div>

    {{!-- Leaderboard Section --}}
    <div class="leaderboard">
      <div class="leaderboard-header">
        <h3 class="leaderboard-title">
          <i class="fas fa-trophy"></i> Bảng xếp hạng
        </h3>
        <button class="leaderboard-refresh" onclick="location.reload()"> {{!-- Simple refresh --}}
          <i class="fas fa-sync-alt"></i>
        </button>
      </div>
      <ul class="leaderboard-list">
        {{#each leaderboard}}
        <li class="leaderboard-item">
           {{!-- Dynamic rank and class --}}
          <div class="leaderboard-rank
            {{#if (eq @index 0)}}rank-1{{/if}}
            {{#if (eq @index 1)}}rank-2{{/if}}
            {{#if (eq @index 2)}}rank-3{{/if}}
            {{#if (gt @index 2)}}rank-other{{/if}}">
            {{add @index 1}} {{!-- Display rank number (1-based) --}}
          </div>
          <div class="leaderboard-info">
            <div class="leaderboard-name">{{this.username}}</div>
            {{!-- Display score (you might want score/total) --}}
            <div class="leaderboard-score">Điểm: {{this.scoreFormatted}}</div>
            {{!-- Display formatted time --}}
            <div class="leaderboard-time">Thời gian: {{this.timeTakenFormatted}}</div>
          </div>
        </li>
        {{else}}
        <li class="leaderboard-item">
            <div class="leaderboard-info">Chưa có ai hoàn thành quiz này.</div>
        </li>
        {{/each}}
      </ul>
    </div>
  </div>

   {{!-- Keep existing client-side script, but note it needs backend integration --}}
   <script>
     // Wait for DOM to be fully loaded
     document.addEventListener('DOMContentLoaded', function() {
       // Get references to the input and button elements
       const commentInput = document.getElementById('commentInput');
       const commentSubmit = document.getElementById('commentSubmit');
       
       if (commentInput && commentSubmit) {
         // Add input event listener to enable/disable button based on content
         commentInput.addEventListener('input', function() {
           // Enable button if input has text, otherwise disable it
           commentSubmit.disabled = this.value.trim() === '';
           
           // Visual feedback - change button appearance
           if (this.value.trim() === '') {
             commentSubmit.classList.add('disabled');
           } else {
             commentSubmit.classList.remove('disabled');
           }
         });
         
         // Check initial state
         commentSubmit.disabled = commentInput.value.trim() === '';
       } else {
         console.error('Comment form elements not found');
       }
     });

     function handleCommentSubmit(event, quizId) {
       event.preventDefault();

       const input = document.getElementById('commentInput');
       const commentText = input.value.trim();

       if (!commentText || !quizId) return;

       // Get userId from session or data attribute
       // This assumes you're storing the user ID somewhere accessible
       const userId = {{authUser.id}}; 
       
       // Send comment to server
       fetch('/comment/add-comment', {
         method: 'POST',
         headers: { 'Content-Type': 'application/json' },
         body: JSON.stringify({
           quizId: quizId,
           userId: userId,
           content: commentText
         })
       })
       .then(response => {
         if (!response.ok) {
           throw new Error('Network response was not ok');
         }
         return response.json();
       })
       .then(data => {
         // Show success message
         Swal.fire({
           icon: 'success',
           title: 'Thành công!',
           text: 'Bình luận của bạn đã được thêm.',
           timer: 2000,
           showConfirmButton: false
         });

         // Update UI
         const commentsList = document.querySelector('.comments-list');
         const newComment = document.createElement('div');
         newComment.className = 'comment-item';

         // Get user initials (first character of username)
         const userInitials = '{{user.username}}'.charAt(0) || 'U';
         const authorName = '{{user.username}}' || 'User';
         const avatarUrl = '{{user.avatarUrl}}'; // If you have user avatar URL

         newComment.innerHTML = `
           <div class="comment-avatar">${avatarUrl ? `<img src="${avatarUrl}" alt="${authorName} avatar" style="width: 100%; height: 100%; border-radius: 50%;">` : userInitials}</div>
           <div class="comment-content">
             <div class="comment-header">
               <span class="comment-author">${authorName}</span>
               <span class="comment-time">Vừa xong</span>
             </div>
             <p class="comment-text">${commentText}</p>
           </div>
         `;
         
         // Insert at top of list
         if (commentsList.querySelector('p') && commentsList.querySelectorAll('.comment-item').length === 0) {
           // If there's only a "No comments" message, remove it
           commentsList.innerHTML = '';
         }
         
         commentsList.insertBefore(newComment, commentsList.firstChild);

         // Update count
         const commentCountElement = document.querySelector('.comments-title');
         const currentCount = commentsList.querySelectorAll('.comment-item').length;
         commentCountElement.innerHTML = `<i class="far fa-comment-dots"></i> Bình luận (${currentCount})`;

         // Reset input and button
         input.value = '';
         document.getElementById('commentSubmit').disabled = true;
       })
       .catch(error => {
         console.error('Error submitting comment:', error);
         Swal.fire({
           icon: 'error',
           title: 'Lỗi!',
           text: 'Không thể gửi bình luận. Vui lòng thử lại.',
         });
       });
     }

     // Disable submit button logic
     document.getElementById('commentInput').addEventListener('input', function(e) {
       const submitButton = document.getElementById('commentSubmit');
       submitButton.disabled = !e.target.value.trim();
     });
     
     // Initial check in case input has value on load
     document.addEventListener('DOMContentLoaded', () => {
       const input = document.getElementById('commentInput');
       const submitButton = document.getElementById('commentSubmit');
       submitButton.disabled = !input.value.trim();
     });

     // Handlebars helper for adding numbers (needed for rank)
     Handlebars.registerHelper('add', function(a, b) {
        return a + b;
     });
     // Handlebars helper for equality check (needed for rank class)
     Handlebars.registerHelper('eq', function(a, b) {
        return a === b;
     });
     // Handlebars helper for greater than check (needed for rank class)
     Handlebars.registerHelper('gt', function(a, b) {
        return a > b;
     });
     // TODO: Add a Handlebars helper for generating star ratings
     /* Example Star Helper:
     Handlebars.registerHelper('stars', function(rating) {
        rating = parseFloat(rating) || 0;
        let html = '';
        const fullStars = Math.floor(rating);
        const halfStar = (rating % 1 >= 0.4) ? 1 : 0; // Adjust threshold? 0.5?
        const emptyStars = 5 - fullStars - halfStar;
        for(let i=0; i<fullStars; i++) html += '<i class="fas fa-star"></i>';
        if(halfStar) html += '<i class="fas fa-star-half-alt"></i>';
        for(let i=0; i<emptyStars; i++) html += '<i class="far fa-star"></i>'; // Use far for empty
        return new Handlebars.SafeString(html + ` (${rating})`);
     });
     // Then in HBS: {{{stars stats.averageRating}}}
     */
   </script>
</body>
