<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat Page</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Custom styles -->
  <style>
    body {
      background-color: #f5f7fa;
    }
    
    .chat-page-container {
      min-height: 100vh;
    }
    
    .room-sidebar {
      height: 100%;
    }
    
    .member-avatar, .room-avatar, .message-avatar, .message-avatar-placeholder {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #e9ecef;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      color: #495057;
    }
    
    .room-avatar {
      background-color: #3498db;
      color: white;
    }
    
    .message-avatar {
      width: 32px;
      height: 32px;
      object-fit: cover;
    }
    
    .message-avatar-placeholder {
      width: 32px;
      height: 32px;
      font-size: 14px;
    }
    
    .member-list {
      max-height: calc(100vh - 260px);
      overflow-y: auto;
    }
    
    .message-bubble {
      position: relative;
      padding: 10px 15px;
      border-radius: 18px;
      max-width: 75%;
      word-wrap: break-word;
      display: inline-block;
    }
    
    .current-user-bubble {
      background-color: #3498db;
      color: white;
      border-bottom-right-radius: 4px;
    }
    
    .other-user-bubble {
      background-color: #e9ecef;
      color: #212529;
      border-bottom-left-radius: 4px;
    }
    
    .message-content-wrapper {
      max-width: 80%;
    }
    
    .message-time {
      font-size: 11px;
      opacity: 0.8;
      margin-left: 8px;
      white-space: nowrap;
    }
    
    .message-username {
      font-size: 13px;
      margin-bottom: 2px;
      color: #6c757d;
    }
    
    .room-title {
      max-width: 200px;
    }
    
    @media (max-width: 768px) {
      .chat-messages {
        height: calc(100vh - 300px) !important;
      }
    }
  </style>
</head>
<body>
  <div class="chat-page-container min-vh-100 d-flex flex-column">
    <!-- Navbar placeholder -->
   
    
    
    <div class="container-fluid flex-grow-1 py-4 px-lg-5">
      <div class="row h-100 g-4">
        <!-- Left Sidebar - Members & Options -->
        <div class="col-lg-3 d-none d-lg-block">
          <div class="card room-sidebar shadow-sm h-100">
            <div class="card-header bg-primary text-white py-3">
              <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0 text-truncate">
                  Room Members <span class="badge bg-light text-dark member-count" id="memberCount">0</span>
                </h5>
                <button class="btn btn-light btn-sm rounded-circle p-1" id="manageMembers">
                  <i class="fas fa-users-gear"></i>
                </button>
              </div>
            </div>
            <div class="card-body p-0 member-list">
              <div class="p-3">
                <div class="input-group input-group-sm mb-3">
                  <input type="text" class="form-control" placeholder="Search members..." aria-label="Search members">
                </div>
              </div>
              <ul class="list-group list-group-flush" id="membersList">
                <!-- Members will be dynamically populated here -->
              </ul>
            </div>
            <div class="card-footer p-3 bg-white">
              <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center" id="inviteBtn">
                <i class="fas fa-user-plus me-2"></i>
                Invite Others
              </button>
            </div>
          </div>
        </div>
        
        <!-- Main Chat Area -->
        <div class="col-lg-9 col-md-12">
          <div class="card chat-container shadow-sm h-100">
            <div class="card-header d-flex justify-content-between align-items-center py-3">
              <div class="d-flex align-items-center">
                <div class="room-avatar me-2" id="roomAvatar">R</div>
                <div>
                  <h5 class="mb-0 room-title text-truncate" title="Room Name" id="roomName">Room Name</h5>
                  <small class="text-muted">
                    <span id="memberCount">0</span> members â€¢ Active now
                  </small>
                </div>
              </div>
              
              <div class="d-flex">
                <button class="btn btn-success d-flex align-items-center me-2" id="playQuizBtn">
                  <i class="fas fa-play me-2"></i>
                  <span class="d-none d-md-inline">Play Quiz</span>
                </button>
                
                <div class="dropdown">
                  <button class="btn btn-light dropdown-toggle rounded-circle p-2" type="button" id="dropdownRoomOptions" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-vertical"></i>
                  </button>
                  <ul class="dropdown-menu shadow-sm border-0" aria-labelledby="dropdownRoomOptions">
                    <li><a class="dropdown-item" href="#" id="addQuizBtn">
                      <i class="fas fa-circle-question me-2 text-primary"></i>
                      Add Quiz
                    </a></li>
                    <li><a class="dropdown-item" href="#" id="changeRoomNameBtn">
                      <i class="fas fa-arrows-left-right me-2 text-danger"></i>
                      Change Room Name
                    </a></li>
                    <li><a class="dropdown-item" href="#" id="manageMembersBtn">
                      <i class="fas fa-users-gear me-2 text-secondary"></i>
                      Manage Members
                    </a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#" id="copyRoomLinkBtn">
                      <i class="fas fa-copy me-2 text-info"></i>
                      Copy Room Link
                    </a></li>
                  </ul>
                </div>
              </div>
            </div>
            
            <div class="card-body p-0 position-relative">
              <div class="chat-messages p-3" id="chatMessages" style="height: calc(100vh - 260px); overflow-y: auto">
                <div class="text-center py-5 text-muted" id="welcomeMessage">
                  <i class="fas fa-display fs-1 mb-3 text-primary opacity-50"></i>
                  <h5>Welcome to the Room!</h5>
                  <p>Start chatting or play a quiz with your friends.</p>
                </div>
                
                <!-- Messages will be dynamically populated here -->
              </div>
            </div>
            
            <div class="card-footer p-3 bg-white">
              <form id="messageForm">
                <div class="input-group">
                  <input type="text" class="form-control py-2" placeholder="Type a message..." id="messageInput">
                  <button class="btn btn-primary d-flex align-items-center" type="submit" id="sendBtn">
                    <i class="fas fa-paper-plane"></i>
                    <span class="ms-2 d-none d-md-inline">Send</span>
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Mobile bottom navigation bar -->
    <div class="d-lg-none fixed-bottom bg-white shadow-lg p-2 border-top">
      <div class="row text-center g-0">
        <div class="col-3">
          <button class="btn btn-light rounded-circle p-2" id="mobileManageMembers">
            <i class="fas fa-users-gear"></i>
            <div class="small mt-1">Members</div>
          </button>
        </div>
        <div class="col-3">
          <button class="btn btn-light rounded-circle p-2" id="mobileInvite">
            <i class="fas fa-user-plus"></i>
            <div class="small mt-1">Invite</div>
          </button>
        </div>
        <div class="col-3">
          <button class="btn btn-light rounded-circle p-2" id="mobileAddQuiz">
            <i class="fas fa-circle-question"></i>
            <div class="small mt-1">Quiz</div>
          </button>
        </div>
        <div class="col-3">
          <button class="btn btn-light rounded-circle p-2" id="mobilePlay">
            <i class="fas fa-play"></i>
            <div class="small mt-1">Play</div>
          </button>
        </div>
      </div>
    </div>
    
    <!-- Modals -->
    <!-- Choose Name Modal -->
    <div class="modal fade" id="choiceNameModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Choose a Username</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="usernameForm">
              <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <input type="text" class="form-control" id="username" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Select Avatar</label>
                <div class="d-flex flex-wrap gap-2">
                  <div class="avatar-option">
                    <input type="radio" name="avatar" id="avatar1" value="avatar1.png" class="d-none">
                    <label for="avatar1" class="avatar-label">A</label>
                  </div>
                  <div class="avatar-option">
                    <input type="radio" name="avatar" id="avatar2" value="avatar2.png" class="d-none">
                    <label for="avatar2" class="avatar-label">B</label>
                  </div>
                  <div class="avatar-option">
                    <input type="radio" name="avatar" id="avatar3" value="avatar3.png" class="d-none">
                    <label for="avatar3" class="avatar-label">C</label>
                  </div>
                </div>
              </div>
              <button type="submit" class="btn btn-primary w-100">Join Room</button>
            </form>
          </div>
        </div>
      </div>
    </div>
    
    <div class="modal fade" id="addQuizModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Add Quiz</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="quizForm">
              <div class="mb-3">
                <label for="questionText" class="form-label">Question</label>
                <input type="text" class="form-control" id="questionText" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Options</label>
                <div class="option-container">
                  <div class="input-group mb-2">
                    <span class="input-group-text">A</span>
                    <input type="text" class="form-control" name="option" required>
                    <div class="input-group-text">
                      <input class="form-check-input" type="radio" name="correctOption" value="0" required>
                    </div>
                  </div>
                  <div class="input-group mb-2">
                    <span class="input-group-text">B</span>
                    <input type="text" class="form-control" name="option" required>
                    <div class="input-group-text">
                      <input class="form-check-input" type="radio" name="correctOption" value="1">
                    </div>
                  </div>
                  <div class="input-group mb-2">
                    <span class="input-group-text">C</span>
                    <input type="text" class="form-control" name="option" required>
                    <div class="input-group-text">
                      <input class="form-check-input" type="radio" name="correctOption" value="2">
                    </div>
                  </div>
                  <div class="input-group mb-2">
                    <span class="input-group-text">D</span>
                    <input type="text" class="form-control" name="option" required>
                    <div class="input-group-text">
                      <input class="form-check-input" type="radio" name="correctOption" value="3">
                    </div>
                  </div>
                </div>
              </div>
              <button type="submit" class="btn btn-primary">Add Question</button>
            </form>
          </div>
        </div>
      </div>
    </div>
    
    <!-- View Members Modal -->
    <div class="modal fade" id="viewMembersModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Room Members</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <ul class="list-group" id="modalMembersList">
              <!-- Members will be populated here -->
            </ul>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Change Room Name Modal -->
    <div class="modal fade" id="changeRoomNameModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Change Room Name</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="roomNameForm">
              <div class="mb-3">
                <label for="newRoomName" class="form-label">New Room Name</label>
                <input type="text" class="form-control" id="newRoomName" required>
              </div>
              <button type="submit" class="btn btn-primary">Save Changes</button>
            </form>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Invite User Modal -->
    <div class="modal fade" id="inviteUserModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Invite Others</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label class="form-label">Room Link</label>
              <div class="input-group">
                <input type="text" class="form-control" id="roomLink" readonly>
                <button class="btn btn-outline-primary" type="button" id="copyLink">
                  <i class="fas fa-copy"></i>
                </button>
              </div>
            </div>
            <div class="d-grid gap-2">
              <button class="btn btn-primary" id="shareBtn">
                <i class="fas fa-share-nodes me-2"></i>
                Share
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Play Game Modal -->
    <div class="modal fade" id="playGameModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Quiz Game</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeQuizGame"></button>
          </div>
          <div class="modal-body">
            <div id="gameContainer">
              <!-- Question Section -->
              <div id="questionSection">
                <div class="progress mb-3">
                  <div class="progress-bar" id="timerBar" role="progressbar" style="width: 100%"></div>
                </div>
                
                <div class="d-flex justify-content-between align-items-center mb-2">
                  <span class="badge bg-primary">Question <span id="currentQuestionNumber">1</span>/<span id="totalQuestions">5</span></span>
                  <span class="badge bg-secondary" id="timerDisplay">30s</span>
                </div>
                
                <div class="card mb-4">
                  <div class="card-body">
                    <h4 id="questionText">Question text will appear here</h4>
                  </div>
                </div>
                
                <div class="row g-3" id="answerOptions">
                  <!-- Answer options will be added here -->
                </div>
              </div>
              
              <!-- Results Section -->
              <div id="resultsSection" style="display: none;">
                <h4 class="mb-3">Results</h4>
                <div class="table-responsive">
                  <table class="table table-bordered">
                    <thead>
                      <tr>
                        <th>Player</th>
                        <th>Answer</th>
                        <th>Correct?</th>
                        <th>Time</th>
                      </tr>
                    </thead>
                    <tbody id="resultsTableBody">
                      <!-- Results will be populated here -->
                    </tbody>
                  </table>
                </div>
              </div>
              
              <!-- Final Results Section -->
              <div id="finalResultsSection" style="display: none;">
                <h4 class="mb-3 text-center">Final Results</h4>
                <div class="table-responsive">
                  <table class="table table-striped">
                    <thead>
                      <tr>
                        <th>Rank</th>
                        <th>Player</th>
                        <th>Score</th>
                        <th>Correct Answers</th>
                      </tr>
                    </thead>
                    <tbody id="finalResultsTableBody">
                      <!-- Final results will be populated here -->
                    </tbody>
                  </table>
                </div>
                <div class="d-grid gap-2 col-md-6 mx-auto mt-4">
                  <button class="btn btn-primary" id="restartGameBtn">
                    <i class="fas fa-rotate-right me-2"></i>Play Again
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // DOM Elements - only the essential ones
        const chatMessages = document.getElementById('chatMessages');
        const welcomeMessage = document.getElementById('welcomeMessage');
        const messageForm = document.getElementById('messageForm');
        const messageInput = document.getElementById('messageInput');
        const roomName = document.getElementById('roomName');
        const roomAvatar = document.getElementById('roomAvatar');
        const membersList = document.getElementById('membersList');
        const memberCount = document.getElementById('memberCount');

        // WebSocket connection
        let socket;
        
        // Get room ID from URL
        const roomId = window.location.pathname.split('/').pop() || 'demo-room';

        // Username management with localStorage
        const USERNAME_KEY = 'chat_username_global';
        const USERNAME_EXPIRY_KEY = 'chat_username_expiry_global';
        let currentUsername = getUsernameFromLocalStorage();

        // Initialize WebSocket connection
        function initWebSocket() {
          // Get the protocol (ws:// or wss://) based on the current page protocol
          const protocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
          const host = window.location.host;
          const wsUrl = `${protocol}${host}`;
          
          console.log(`Connecting to WebSocket at ${wsUrl}`);
          
          socket = new WebSocket(wsUrl);
          
          socket.onopen = function() {
            console.log('WebSocket connection established');
            
            // Join room with username
            if (currentUsername) {
              joinRoom(currentUsername, roomId);
            }
          };
          
          socket.onmessage = function(event) {
            const data = JSON.parse(event.data);
            console.log('Received WebSocket message:', data);
            
            handleWebSocketMessage(data);
          };
          
          socket.onclose = function() {
            console.log('WebSocket connection closed');
            
            // Show disconnected message
            addMessage({
              username: 'System',
              message: 'Disconnected from server. Trying to reconnect...',
              timestamp: new Date().toISOString()
            });
            
            // Try to reconnect after a delay
            setTimeout(initWebSocket, 3000);
          };
          
          socket.onerror = function(error) {
            console.error('WebSocket error:', error);
          };
        }
        
        // Handle WebSocket messages
        function handleWebSocketMessage(data) {
          switch(data.type) {
            case 'message':
              addMessage({
                username: data.username,
                message: data.message,
                timestamp: new Date().toISOString(),
                userAvatar: data.userAvatar
              });
              break;
              
            case 'playerList':
              updateMembersList(data.players);
              break;
              
            case 'start_game':
              // Show notification that game is starting
              addMessage({
                username: 'System',
                message: 'Game is starting!',
                timestamp: new Date().toISOString()
              });
              break;
              
            case 'question':
              // Handle question for the game
              showQuestion(data.question, data.questionNumber, data.totalQuestions);
              break;
              
            case 'all_answers':
              // Show results of current question
              showQuestionResults(data.answers, data.correctAnswer);
              break;
              
            case 'end_game':
              // Show final game results
              showFinalResults(data.results, data.totalQuestions);
              break;
              
            case 'error':
              // Show error message
              addMessage({
                username: 'System',
                message: `Error: ${data.message}`,
                timestamp: new Date().toISOString()
              });
              console.error('WebSocket error message:', data.message);
              break;
          }
        }
        
        // Join room function
        function joinRoom(username, roomId) {
          if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
              type: 'join_room',
              username: username,
              roomId: roomId
            }));
            
            console.log(`Joining room ${roomId} as ${username}`);
          } else {
            console.error('Socket is not open, cannot join room');
          }
        }
        
        // Send message function
        function sendMessage(message) {
          if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
              type: 'message',
              username: currentUsername,
              message: message,
              roomId: roomId,
              userAvatar: '' // Add avatar if available
            }));
            
            console.log(`Sending message: ${message}`);
          } else {
            console.error('Socket is not open, cannot send message');
            
            // Show error message
            addMessage({
              username: 'System',
              message: 'Cannot send message: Not connected to server',
              timestamp: new Date().toISOString()
            });
          }
        }
        
        // Function to update members list
        function updateMembersList(players) {
          if (membersList) {
            membersList.innerHTML = '';
            
            players.forEach(player => {
              const listItem = document.createElement('li');
              listItem.className = 'list-group-item d-flex align-items-center';
              
              const initial = player.charAt(0).toUpperCase();
              
              listItem.innerHTML = `
                <div class="member-avatar me-2">${initial}</div>
                <span>${player}</span>
              `;
              
              membersList.appendChild(listItem);
            });
            
            // Update member count
            if (memberCount) {
              memberCount.textContent = players.length;
            }
          }
        }
        
        // Start game function
        function startGame() {
          if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
              type: 'start_game',
              roomId: roomId
            }));
          }
        }
        
        // Function to submit answer
        function submitAnswer(answerId) {
          if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
              type: 'submit_answer',
              username: currentUsername,
              answer: answerId
            }));
          }
        }
        
        // Request next question
        function requestNextQuestion() {
          if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({
              type: 'next_question',
              roomId: roomId
            }));
          }
        }
        
        // Handle showing questions in the UI
        function showQuestion(question, questionNumber, totalQuestions) {
          // Get modal elements
          const playGameModal = document.getElementById('playGameModal');
          const questionSection = document.getElementById('questionSection');
          const resultsSection = document.getElementById('resultsSection');
          const finalResultsSection = document.getElementById('finalResultsSection');
          const questionText = document.getElementById('questionText');
          const answerOptions = document.getElementById('answerOptions');
          const currentQuestionNumber = document.getElementById('currentQuestionNumber');
          const totalQuestionsElement = document.getElementById('totalQuestions');
          
          if (!playGameModal || !questionSection) return;
          
          // Show modal if not already shown
          const modal = bootstrap.Modal.getInstance(playGameModal) || new bootstrap.Modal(playGameModal);
          modal.show();
          
          // Update question display
          questionSection.style.display = 'block';
          resultsSection.style.display = 'none';
          finalResultsSection.style.display = 'none';
          
          // Update question details
          if (questionText) questionText.textContent = question.text;
          if (currentQuestionNumber) currentQuestionNumber.textContent = questionNumber;
          if (totalQuestionsElement) totalQuestionsElement.textContent = totalQuestions;
          
          // Create answer options
          if (answerOptions) {
            answerOptions.innerHTML = '';
            
            question.options.forEach((option, index) => {
              const optionDiv = document.createElement('div');
              optionDiv.className = 'col-md-6';
              optionDiv.innerHTML = `
                <div class="card mb-2 answer-option" data-option="${index}">
                  <div class="card-body">
                    <div class="d-flex align-items-center">
                      <div class="answer-letter me-3">${String.fromCharCode(65 + index)}</div>
                      <div>${option.text}</div>
                    </div>
                  </div>
                </div>
              `;
              
              // Add click event to submit answer
              optionDiv.querySelector('.answer-option').addEventListener('click', function() {
                submitAnswer(index);
                
                // Disable all options after selection
                document.querySelectorAll('.answer-option').forEach(opt => {
                  opt.style.pointerEvents = 'none';
                  opt.classList.add('disabled');
                });
                
                // Highlight selected option
                this.classList.add('selected');
              });
              
              answerOptions.appendChild(optionDiv);
            });
          }
          
          // Start timer
          startQuestionTimer(30); // 30 seconds per question
        }
        
        // Timer for questions
        function startQuestionTimer(seconds) {
          const timerBar = document.getElementById('timerBar');
          const timerDisplay = document.getElementById('timerDisplay');
          
          if (!timerBar || !timerDisplay) return;
          
          // Reset timer UI
          timerBar.style.width = '100%';
          timerDisplay.textContent = `${seconds}s`;
          
          let timeRemaining = seconds;
          const timerInterval = setInterval(() => {
            timeRemaining--;
            
            // Update timer display
            if (timerDisplay) timerDisplay.textContent = `${timeRemaining}s`;
            
            // Update progress bar
            if (timerBar) {
              const percentage = (timeRemaining / seconds) * 100;
              timerBar.style.width = `${percentage}%`;
              
              // Change color based on time remaining
              if (timeRemaining <= 5) {
                timerBar.classList.add('bg-danger');
              } else if (timeRemaining <= 15) {
                timerBar.classList.add('bg-warning');
                timerBar.classList.remove('bg-danger');
              }
            }
            
            if (timeRemaining <= 0) {
              clearInterval(timerInterval);
              
              // Auto-submit if no answer was selected
              const selected = document.querySelector('.answer-option.selected');
              if (!selected) {
                submitAnswer(-1); // -1 indicates no answer
              }
            }
          }, 1000);
        }
        
        // Show question results
        function showQuestionResults(answers, correctAnswer) {
          const resultsSection = document.getElementById('resultsSection');
          const questionSection = document.getElementById('questionSection');
          const resultsTableBody = document.getElementById('resultsTableBody');
          
          if (!resultsSection || !questionSection || !resultsTableBody) return;
          
          // Switch sections
          questionSection.style.display = 'none';
          resultsSection.style.display = 'block';
          
          // Clear previous results
          resultsTableBody.innerHTML = '';
          
          // Add results to table
          answers.forEach(result => {
            const row = document.createElement('tr');
            
            // Add CSS class based on correctness
            if (result.correct) {
              row.classList.add('table-success');
            } else {
              row.classList.add('table-danger');
            }
            
            row.innerHTML = `
              <td>${result.username}</td>
              <td>${result.answer >= 0 ? String.fromCharCode(65 + result.answer) : 'No answer'}</td>
              <td>${result.correct ? '<i class="fas fa-check-circle text-success"></i>' : '<i class="fas fa-times-circle text-danger"></i>'}</td>
              <td>${result.score}</td>
            `;
            
            resultsTableBody.appendChild(row);
          });
          
          // Add next question button with timeout
          setTimeout(() => {
            // Add button to request next question
            if (resultsSection) {
              const nextButton = document.createElement('button');
              nextButton.className = 'btn btn-primary mt-3';
              nextButton.textContent = 'Next Question';
              nextButton.addEventListener('click', requestNextQuestion);
              
              // Remove existing button if any
              const existingButton = resultsSection.querySelector('.btn-primary');
              if (existingButton) {
                existingButton.remove();
              }
              
              resultsSection.appendChild(nextButton);
            }
          }, 2000);
        }
        
        // Show final results
        function showFinalResults(results, totalQuestions) {
          const finalResultsSection = document.getElementById('finalResultsSection');
          const questionSection = document.getElementById('questionSection');
          const resultsSection = document.getElementById('resultsSection');
          const finalResultsTableBody = document.getElementById('finalResultsTableBody');
          const restartGameBtn = document.getElementById('restartGameBtn');
          
          if (!finalResultsSection || !finalResultsTableBody) return;
          
          // Switch sections
          questionSection.style.display = 'none';
          resultsSection.style.display = 'none';
          finalResultsSection.style.display = 'block';
          
          // Clear previous results
          finalResultsTableBody.innerHTML = '';
          
          // Add results to table
          results.forEach((result, index) => {
            const row = document.createElement('tr');
            
            // Highlight top 3 players
            if (index === 0) row.classList.add('table-warning'); // gold
            if (index === 1) row.classList.add('table-light'); // silver
            if (index === 2) row.classList.add('table-secondary'); // bronze
            
            const correctAnswers = Math.floor(result.score / 10); // Assuming 10 points per correct answer
            
            row.innerHTML = `
              <td>${index + 1}</td>
              <td>${result.username}</td>
              <td>${result.score}</td>
              <td>${correctAnswers}/${totalQuestions}</td>
            `;
            
            finalResultsTableBody.appendChild(row);
          });
          
          // Add restart button event
          if (restartGameBtn) {
            restartGameBtn.addEventListener('click', function() {
              startGame();
            });
          }
        }
        
        // Initialize on page load
        initWebSocket();
        
        // Handle message form submission
        if (messageForm) {
          messageForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            if (!currentUsername) {
              const choiceNameModal = new bootstrap.Modal(document.getElementById('choiceNameModal'));
              choiceNameModal.show();
              return;
            }
            
            const messageText = messageInput.value.trim();
            if (messageText) {
              sendMessage(messageText);
              messageInput.value = '';
            }
          });
        }
        
        // Handle play quiz button
        const playQuizBtn = document.getElementById('playQuizBtn');
        if (playQuizBtn) {
          playQuizBtn.addEventListener('click', function() {
            startGame();
          });
        }
        
        // Handle mobile play button
        const mobilePlay = document.getElementById('mobilePlay');
        if (mobilePlay) {
          mobilePlay.addEventListener('click', function() {
            startGame();
          });
        }

        // Save username to localStorage with expiration
        function saveUsernameToLocalStorage(username) {
          const expiryTime = Date.now() + (60 * 60 * 1000); // 1 hour
          localStorage.setItem(USERNAME_KEY, username);
          localStorage.setItem(USERNAME_EXPIRY_KEY, expiryTime.toString());
        }
        
        // Get username from localStorage if not expired
        function getUsernameFromLocalStorage() {
          const username = localStorage.getItem(USERNAME_KEY);
          const expiry = localStorage.getItem(USERNAME_EXPIRY_KEY);
          
          if (!username || !expiry) return null;
          
          if (Date.now() > parseInt(expiry)) {
            localStorage.removeItem(USERNAME_KEY);
            localStorage.removeItem(USERNAME_EXPIRY_KEY);
            return null;
          }
          
          return username;
        }
        
        // Function to add message to chat
        function addMessage(messageData) {
          if (!chatMessages) return;
          
          const messageElement = document.createElement('div');
          const isCurrentUser = messageData.username === currentUsername;
          
          messageElement.className = `d-flex mb-3 ${isCurrentUser ? 'justify-content-end' : ''}`;
          
          if (messageData.username === 'System') {
            // System message
            messageElement.className = 'd-flex justify-content-center mb-3';
            messageElement.innerHTML = `
              <div class="bg-light rounded-pill px-3 py-2">
                <small class="text-muted">${messageData.message}</small>
              </div>
            `;
          } else {
            // User message
            const initial = messageData.username.charAt(0).toUpperCase();
            messageElement.innerHTML = `
              ${!isCurrentUser ? `<div class="message-avatar-placeholder me-2">${initial}</div>` : ''}
              <div class="message-content-wrapper">
                ${!isCurrentUser ? `<div class="message-username">${messageData.username}</div>` : ''}
                <div class="d-flex align-items-end ${isCurrentUser ? 'justify-content-end' : ''}">
                  <div class="message-bubble ${isCurrentUser ? 'current-user-bubble' : 'other-user-bubble'}">
                    ${messageData.message}
                  </div>
                  <small class="message-time">${new Date(messageData.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</small>
                </div>
              </div>
              ${isCurrentUser ? `<div class="message-avatar-placeholder ms-2">${initial}</div>` : ''}
            `;
          }
          
          // Hide welcome message
          if (welcomeMessage) {
            welcomeMessage.style.display = 'none';
          }
          
          chatMessages.appendChild(messageElement);
          chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Handle username form submission
        const usernameForm = document.getElementById('usernameForm');
        if (usernameForm) {
          usernameForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const username = document.getElementById('username').value.trim();
            
            if (username) {
              currentUsername = username;
              saveUsernameToLocalStorage(username);
              
              const choiceNameModal = bootstrap.Modal.getInstance(document.getElementById('choiceNameModal'));
              if (choiceNameModal) choiceNameModal.hide();
              
              // Join room with new username
              joinRoom(username, roomId);
              
              // Add welcome message
              addMessage({
                username: 'System',
                message: `Welcome to the room, ${username}!`,
                timestamp: new Date().toISOString()
              });
            } else {
              alert('Please enter a valid username');
            }
          });
        }
        
        // Check server provided username
        const serverProvidedUsername = '{{username}}';
        if (!currentUsername && serverProvidedUsername && serverProvidedUsername !== '{{username}}') {
          currentUsername = serverProvidedUsername;
          saveUsernameToLocalStorage(currentUsername);
        }
        
        // Username required to enter chat
        if (!currentUsername) {
          const choiceNameModal = new bootstrap.Modal(document.getElementById('choiceNameModal'));
          // Configure modal to be non-dismissible
          document.getElementById('choiceNameModal').setAttribute('data-bs-backdrop', 'static');
          document.getElementById('choiceNameModal').setAttribute('data-bs-keyboard', 'false');
          
          // Show the modal
          setTimeout(() => {
            choiceNameModal.show();
          }, 500);
        } else {
          // Join room with existing username
          setTimeout(() => {
            joinRoom(currentUsername, roomId);
          }, 1000);
        }
      });
    </script>
  </div>
</body>
</html>