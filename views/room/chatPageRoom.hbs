<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat Page</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Custom styles -->
  <style>
    body {
      background-color: #f5f7fa;
    }
    
    .chat-page-container {
      min-height: 100vh;
    }
    
    .room-sidebar {
      height: 100%;
    }
    
    .member-avatar, .room-avatar, .message-avatar, .message-avatar-placeholder {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #e9ecef;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      color: #495057;
    }
    
    .room-avatar {
      background-color: #3498db;
      color: white;
    }
    
    .message-avatar {
      width: 32px;
      height: 32px;
      object-fit: cover;
    }
    
    .message-avatar-placeholder {
      width: 32px;
      height: 32px;
      font-size: 14px;
    }
    
    .member-list {
      max-height: calc(100vh - 260px);
      overflow-y: auto;
    }
    
    .message-bubble {
      position: relative;
      padding: 10px 15px;
      border-radius: 18px;
      max-width: 75%;
      word-wrap: break-word;
      display: inline-block;
    }
    
    .current-user-bubble {
      background-color: #3498db;
      color: white;
      border-bottom-right-radius: 4px;
    }
    
    .other-user-bubble {
      background-color: #e9ecef;
      color: #212529;
      border-bottom-left-radius: 4px;
    }
    
    .message-content-wrapper {
      max-width: 80%;
    }
    
    .message-time {
      font-size: 11px;
      opacity: 0.8;
      margin-left: 8px;
      white-space: nowrap;
    }
    
    .message-username {
      font-size: 13px;
      margin-bottom: 2px;
      color: #6c757d;
    }
    
    .room-title {
      max-width: 200px;
    }
    
    @media (max-width: 768px) {
      .chat-messages {
        height: calc(100vh - 300px) !important;
      }
    }
  </style>
</head>
<body>
  <div class="chat-page-container min-vh-100 d-flex flex-column">
    <!-- Navbar placeholder -->
   
    
    
    <div class="container-fluid flex-grow-1 py-4 px-lg-5">
      <div class="row h-100 g-4">
        <!-- Left Sidebar - Members & Options -->
        <div class="col-lg-3 d-none d-lg-block">
          <div class="card room-sidebar shadow-sm h-100">
            <div class="card-header bg-primary text-white py-3">
              <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0 text-truncate">
                  Room Members <span class="badge bg-light text-dark member-count">0</span>
                </h5>
                <button class="btn btn-light btn-sm rounded-circle p-1" id="manageMembers">
                  <i class="fas fa-users-gear"></i>
                </button>
              </div>
            </div>
            <div class="card-body p-0 member-list">
              <div class="p-3">
                <div class="input-group input-group-sm mb-3">
                  <input type="text" class="form-control" placeholder="Search members..." aria-label="Search members">
                </div>
              </div>
              <ul class="list-group list-group-flush" id="membersList">
                <!-- Members will be dynamically populated here -->
              </ul>
            </div>
            <div class="card-footer p-3 bg-white">
              <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center" id="inviteBtn">
                <i class="fas fa-user-plus me-2"></i>
                Invite Others
              </button>
            </div>
          </div>
        </div>
        
        <!-- Main Chat Area -->
        <div class="col-lg-9 col-md-12">
          <div class="card chat-container shadow-sm h-100">
            <div class="card-header d-flex justify-content-between align-items-center py-3">
              <div class="d-flex align-items-center">
                <div class="room-avatar me-2" id="roomAvatar">R</div>
                <div>
                  <h5 class="mb-0 room-title text-truncate" title="Room Name" id="roomName">Room Name</h5>
                  <small class="text-muted">
                    <span id="memberCount">0</span> members â€¢ Active now
                  </small>
                </div>
              </div>
              
              <div class="d-flex">
                <button class="btn btn-success d-flex align-items-center me-2" id="playQuizBtn">
                  <i class="fas fa-play me-2"></i>
                  <span class="d-none d-md-inline">Play Quiz</span>
                </button>
                
                <div class="dropdown">
                  <button class="btn btn-light dropdown-toggle rounded-circle p-2" type="button" id="dropdownRoomOptions" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-vertical"></i>
                  </button>
                  <ul class="dropdown-menu shadow-sm border-0" aria-labelledby="dropdownRoomOptions">
                    <li><a class="dropdown-item" href="#" id="addQuizBtn">
                      <i class="fas fa-circle-question me-2 text-primary"></i>
                      Add Quiz
                    </a></li>
                    <li><a class="dropdown-item" href="#" id="changeRoomNameBtn">
                      <i class="fas fa-arrows-left-right me-2 text-danger"></i>
                      Change Room Name
                    </a></li>
                    <li><a class="dropdown-item" href="#" id="manageMembersBtn">
                      <i class="fas fa-users-gear me-2 text-secondary"></i>
                      Manage Members
                    </a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#" id="copyRoomLinkBtn">
                      <i class="fas fa-copy me-2 text-info"></i>
                      Copy Room Link
                    </a></li>
                  </ul>
                </div>
              </div>
            </div>
            
            <div class="card-body p-0 position-relative">
              <div class="chat-messages p-3" id="chatMessages" style="height: calc(100vh - 260px); overflow-y: auto">
                <div class="text-center py-5 text-muted" id="welcomeMessage">
                  <i class="fas fa-display fs-1 mb-3 text-primary opacity-50"></i>
                  <h5>Welcome to the Room!</h5>
                  <p>Start chatting or play a quiz with your friends.</p>
                </div>
                
                <!-- Messages will be dynamically populated here -->
              </div>
            </div>
            
            <div class="card-footer p-3 bg-white">
              <form id="messageForm">
                <div class="input-group">
                  <input type="text" class="form-control py-2" placeholder="Type a message..." id="messageInput">
                  <button class="btn btn-primary d-flex align-items-center" type="submit" id="sendBtn">
                    <i class="fas fa-paper-plane"></i>
                    <span class="ms-2 d-none d-md-inline">Send</span>
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Mobile bottom navigation bar -->
    <div class="d-lg-none fixed-bottom bg-white shadow-lg p-2 border-top">
      <div class="row text-center g-0">
        <div class="col-3">
          <button class="btn btn-light rounded-circle p-2" id="mobileManageMembers">
            <i class="fas fa-users-gear"></i>
            <div class="small mt-1">Members</div>
          </button>
        </div>
        <div class="col-3">
          <button class="btn btn-light rounded-circle p-2" id="mobileInvite">
            <i class="fas fa-user-plus"></i>
            <div class="small mt-1">Invite</div>
          </button>
        </div>
        <div class="col-3">
          <button class="btn btn-light rounded-circle p-2" id="mobileAddQuiz">
            <i class="fas fa-circle-question"></i>
            <div class="small mt-1">Quiz</div>
          </button>
        </div>
        <div class="col-3">
          <button class="btn btn-light rounded-circle p-2" id="mobilePlay">
            <i class="fas fa-play"></i>
            <div class="small mt-1">Play</div>
          </button>
        </div>
      </div>
    </div>
    
    <!-- Modals -->
    <!-- Choose Name Modal -->
    <div class="modal fade" id="choiceNameModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Choose a Username</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="usernameForm">
              <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <input type="text" class="form-control" id="username" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Select Avatar</label>
                <div class="d-flex flex-wrap gap-2">
                  <div class="avatar-option">
                    <input type="radio" name="avatar" id="avatar1" value="avatar1.png" class="d-none">
                    <label for="avatar1" class="avatar-label">A</label>
                  </div>
                  <div class="avatar-option">
                    <input type="radio" name="avatar" id="avatar2" value="avatar2.png" class="d-none">
                    <label for="avatar2" class="avatar-label">B</label>
                  </div>
                  <div class="avatar-option">
                    <input type="radio" name="avatar" id="avatar3" value="avatar3.png" class="d-none">
                    <label for="avatar3" class="avatar-label">C</label>
                  </div>
                </div>
              </div>
              <button type="submit" class="btn btn-primary w-100">Join Room</button>
            </form>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Add Quiz Modal -->
    <div class="modal fade" id="addQuizModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Add Quiz</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="quizForm">
              <div class="mb-3">
                <label for="questionText" class="form-label">Question</label>
                <input type="text" class="form-control" id="questionText" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Options</label>
                <div class="option-container">
                  <div class="input-group mb-2">
                    <span class="input-group-text">A</span>
                    <input type="text" class="form-control" name="option" required>
                    <div class="input-group-text">
                      <input class="form-check-input" type="radio" name="correctOption" value="0" required>
                    </div>
                  </div>
                  <div class="input-group mb-2">
                    <span class="input-group-text">B</span>
                    <input type="text" class="form-control" name="option" required>
                    <div class="input-group-text">
                      <input class="form-check-input" type="radio" name="correctOption" value="1">
                    </div>
                  </div>
                  <div class="input-group mb-2">
                    <span class="input-group-text">C</span>
                    <input type="text" class="form-control" name="option" required>
                    <div class="input-group-text">
                      <input class="form-check-input" type="radio" name="correctOption" value="2">
                    </div>
                  </div>
                  <div class="input-group mb-2">
                    <span class="input-group-text">D</span>
                    <input type="text" class="form-control" name="option" required>
                    <div class="input-group-text">
                      <input class="form-check-input" type="radio" name="correctOption" value="3">
                    </div>
                  </div>
                </div>
              </div>
              <button type="submit" class="btn btn-primary">Add Question</button>
            </form>
          </div>
        </div>
      </div>
    </div>
    
    <!-- View Members Modal -->
    <div class="modal fade" id="viewMembersModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Room Members</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <ul class="list-group" id="modalMembersList">
              <!-- Members will be populated here -->
            </ul>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Change Room Name Modal -->
    <div class="modal fade" id="changeRoomNameModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Change Room Name</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="roomNameForm">
              <div class="mb-3">
                <label for="newRoomName" class="form-label">New Room Name</label>
                <input type="text" class="form-control" id="newRoomName" required>
              </div>
              <button type="submit" class="btn btn-primary">Save Changes</button>
            </form>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Invite User Modal -->
    <div class="modal fade" id="inviteUserModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Invite Others</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label class="form-label">Room Link</label>
              <div class="input-group">
                <input type="text" class="form-control" id="roomLink" readonly>
                <button class="btn btn-outline-primary" type="button" id="copyLink">
                  <i class="fas fa-copy"></i>
                </button>
              </div>
            </div>
            <div class="d-grid gap-2">
              <button class="btn btn-primary" id="shareBtn">
                <i class="fas fa-share-nodes me-2"></i>
                Share
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Play Game Modal -->
    <div class="modal fade" id="playGameModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Quiz Game</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeQuizGame"></button>
          </div>
          <div class="modal-body">
            <div id="gameContainer">
              <!-- Question Section -->
              <div id="questionSection">
                <div class="progress mb-3">
                  <div class="progress-bar" id="timerBar" role="progressbar" style="width: 100%"></div>
                </div>
                
                <div class="d-flex justify-content-between align-items-center mb-2">
                  <span class="badge bg-primary">Question <span id="currentQuestionNumber">1</span>/<span id="totalQuestions">5</span></span>
                  <span class="badge bg-secondary" id="timerDisplay">30s</span>
                </div>
                
                <div class="card mb-4">
                  <div class="card-body">
                    <h4 id="questionText">Question text will appear here</h4>
                  </div>
                </div>
                
                <div class="row g-3" id="answerOptions">
                  <!-- Answer options will be added here -->
                </div>
              </div>
              
              <!-- Results Section -->
              <div id="resultsSection" style="display: none;">
                <h4 class="mb-3">Results</h4>
                <div class="table-responsive">
                  <table class="table table-bordered">
                    <thead>
                      <tr>
                        <th>Player</th>
                        <th>Answer</th>
                        <th>Correct?</th>
                        <th>Time</th>
                      </tr>
                    </thead>
                    <tbody id="resultsTableBody">
                      <!-- Results will be populated here -->
                    </tbody>
                  </table>
                </div>
              </div>
              
              <!-- Final Results Section -->
              <div id="finalResultsSection" style="display: none;">
                <h4 class="mb-3 text-center">Final Results</h4>
                <div class="table-responsive">
                  <table class="table table-striped">
                    <thead>
                      <tr>
                        <th>Rank</th>
                        <th>Player</th>
                        <th>Score</th>
                        <th>Correct Answers</th>
                      </tr>
                    </thead>
                    <tbody id="finalResultsTableBody">
                      <!-- Final results will be populated here -->
                    </tbody>
                  </table>
                </div>
                <div class="d-grid gap-2 col-md-6 mx-auto mt-4">
                  <button class="btn btn-primary" id="restartGameBtn">
                    <i class="fas fa-rotate-right me-2"></i>Play Again
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
      // Simple client-side implementation for demo purposes
      document.addEventListener('DOMContentLoaded', function() {
        // DOM Elements
        const membersList = document.getElementById('membersList');
        const modalMembersList = document.getElementById('modalMembersList');
        const chatMessages = document.getElementById('chatMessages');
        const welcomeMessage = document.getElementById('welcomeMessage');
        const messageForm = document.getElementById('messageForm');
        const messageInput = document.getElementById('messageInput');
        const roomName = document.getElementById('roomName');
        const roomAvatar = document.getElementById('roomAvatar');
        const memberCount = document.getElementById('memberCount');
        const memberCountBadge = document.querySelector('.member-count');
        
        // Modals
        const choiceNameModalElement = document.getElementById('choiceNameModal');
        const choiceNameModal = new bootstrap.Modal(choiceNameModalElement);
        
        // Mock data for messages
        let messages = [];
        
        // Get username from server if user is logged in (passed from router)
        let currentUsername = '{{username}}' || '';
        let currentUserAvatar = '';
        const roomId = window.location.pathname.split('/').pop() || 'demo-room';
        
        // Check if we have a username from server (user is logged in)
        const isUserLoggedIn = !!currentUsername;
        
        if (isUserLoggedIn) {
          console.log("Using logged in username:", currentUsername);
          
          // Add user to members list immediately
          if (!members.some(m => m.username === currentUsername)) {
            members.push({ username: currentUsername });
            // These functions will be called after the DOM is fully loaded
            setTimeout(() => {
              renderMembers();
              updateMemberCounts();
              
              // Add welcome message
              addMessage({
                username: 'System',
                message: `Welcome to the room, ${currentUsername}!`,
                userAvatar: '',
                timestamp: new Date().toISOString()
              });
            }, 100);
          }
        } else {
          // Not logged in - MUST select a username to continue
          
          // Configure modal to be non-dismissible
          choiceNameModalElement.setAttribute('data-bs-backdrop', 'static');
          choiceNameModalElement.setAttribute('data-bs-keyboard', 'false');
          
          // Remove the close button's dismiss functionality
          const modalCloseBtn = choiceNameModalElement.querySelector('.btn-close');
          if (modalCloseBtn) {
            modalCloseBtn.setAttribute('data-bs-dismiss', '');
            modalCloseBtn.addEventListener('click', function(e) {
              e.preventDefault();
              // Show alert about needing to select a username
              alert('You must enter a username to join this chat room.');
            });
          }
          
          // Always show the modal for non-logged in users
          setTimeout(() => {
            choiceNameModal.show();
          }, 500);
        }
        
        // Mock room data
        const room = {
          name: 'Demo Quiz Room',
          id: roomId
        };
        
        // Mock members data
        let members = [
          { username: 'Alice' },
          { username: 'Bob' },
          { username: 'Charlie' }
        ];
        
        // Set room info
        roomName.textContent = room.name;
        roomName.title = room.name;
        roomAvatar.textContent = room.name.charAt(0).toUpperCase();
        
        // Update member counts
        updateMemberCounts();
        
        // Render members list
        renderMembers();
        
        // Handle username form submission (for non-logged in users)
        document.getElementById('usernameForm').addEventListener('submit', function(e) {
          e.preventDefault();
          const username = document.getElementById('username').value.trim();
          
          if (username) {
            currentUsername = username;
            
            // Get selected avatar
            const selectedAvatar = document.querySelector('input[name="avatar"]:checked');
            if (selectedAvatar) {
              currentUserAvatar = selectedAvatar.value;
            }
            
            // Add user to members
            if (!members.some(m => m.username === username)) {
              members.push({ username });
              renderMembers();
              updateMemberCounts();
            }
            
            choiceNameModal.hide();
            
            // Add welcome message
            addMessage({
              username: 'System',
              message: `Welcome to the room, ${username}!`,
              userAvatar: '',
              timestamp: new Date().toISOString()
            });
          } else {
            // Username field is empty
            alert('Please enter a valid username');
          }
        });
        
        // Handle message form submission
        messageForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const message = messageInput.value.trim();
          if (message && currentUsername) {
            addMessage({
              username: currentUsername,
              message: message,
              userAvatar: currentUserAvatar,
              timestamp: new Date().toISOString()
            });
            messageInput.value = '';
          }
        });
        
        // Button click handlers
        document.getElementById('addQuizBtn').addEventListener('click', () => addQuizModal.show());
        document.getElementById('mobileAddQuiz').addEventListener('click', () => addQuizModal.show());
        
        document.getElementById('manageMembers').addEventListener('click', () => viewMembersModal.show());
        document.getElementById('manageMembersBtn').addEventListener('click', () => viewMembersModal.show());
        document.getElementById('mobileManageMembers').addEventListener('click', () => viewMembersModal.show());
        
        document.getElementById('changeRoomNameBtn').addEventListener('click', () => changeRoomNameModal.show());
        
        document.getElementById('inviteBtn').addEventListener('click', () => showInviteModal());
        document.getElementById('mobileInvite').addEventListener('click', () => showInviteModal());
        
        document.getElementById('playQuizBtn').addEventListener('click', () => showPlayGameModal());
        document.getElementById('mobilePlay').addEventListener('click', () => showPlayGameModal());
        
        document.getElementById('copyRoomLinkBtn').addEventListener('click', () => copyRoomLink());
        
        // Room name form handler
        document.getElementById('roomNameForm').addEventListener('submit', function(e) {
          e.preventDefault();
          const newName = document.getElementById('newRoomName').value.trim();
          if (newName) {
            room.name = newName;
            roomName.textContent = newName;
            roomName.title = newName;
            roomAvatar.textContent = newName.charAt(0).toUpperCase();
            changeRoomNameModal.hide();
            
            // Add system message
            addMessage({
              username: 'System',
              message: `Room name changed to "${newName}"`,
              userAvatar: '',
              timestamp: new Date().toISOString()
            });
          }
        });
        
        // Copy room link
        document.getElementById('copyLink').addEventListener('click', function() {
          const roomLink = document.getElementById('roomLink');
          roomLink.select();
          document.execCommand('copy');
          alert('Room link copied to clipboard!');
        });
        
        // Helper Functions
        function renderMembers() {
          membersList.innerHTML = '';
          modalMembersList.innerHTML = '';
          
          members.forEach((member, index) => {
            // Sidebar list
            const listItem = document.createElement('li');
            listItem.className = 'list-group-item border-0 d-flex align-items-center px-3 py-2';
            listItem.innerHTML = `
              <div class="member-avatar me-2">${member.username.charAt(0).toUpperCase()}</div>
              <span class="text-truncate">${member.username}</span>
              ${member.username === currentUsername ? '<span class="badge bg-primary ms-auto">You</span>' : ''}
            `;
            membersList.appendChild(listItem);
            
            // Modal list
            const modalListItem = document.createElement('li');
            modalListItem.className = 'list-group-item d-flex justify-content-between align-items-center';
            modalListItem.innerHTML = `
              <div class="d-flex align-items-center">
                <div class="member-avatar me-2">${member.username.charAt(0).toUpperCase()}</div>
                <span>${member.username}</span>
              </div>
              ${member.username === currentUsername ? '<span class="badge bg-primary">You</span>' : ''}
            `;
            modalMembersList.appendChild(modalListItem);
          });
        }
        
        function updateMemberCounts() {
          const count = members.length;
          memberCount.textContent = count;
          memberCountBadge.textContent = count;
        }
        
        function formatTime(timestamp) {
          const date = new Date(timestamp);
          return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }
        
        function addMessage(msg) {
          if (messages.length === 0) {
            welcomeMessage.style.display = 'none';
          }
          
          const isCurrentUser = msg.username === currentUsername;
          
          const messageContainer = document.createElement('div');
          messageContainer.className = `message-container ${isCurrentUser ? 'current-user' : ''} mb-2`;
          
          const messageContent = `
            <div class="d-flex">
              ${!isCurrentUser ? `
                <div class="me-2">
                  ${msg.userAvatar ? `
                    <img src="${msg.userAvatar}" alt="${msg.username}'s avatar" class="message-avatar">
                  ` : `
                    <div class="message-avatar-placeholder">
                      ${msg.username.charAt(0).toUpperCase()}
                    </div>
                  `}
                </div>
              ` : ''}
              
              <div class="message-content-wrapper ${isCurrentUser ? 'ms-auto' : ''}">
                ${!isCurrentUser ? `
                  <div class="message-username">
                    ${msg.username}
                  </div>
                ` : ''}
                
                <div class="message-bubble ${isCurrentUser ? 'current-user-bubble' : 'other-user-bubble'}">
                 ${msg.message}
                  <span class="message-time">
                    ${formatTime(msg.timestamp || new Date())}
                  </span>
                </div>
              </div>
              
              ${isCurrentUser ? `
                <div class="ms-2 d-none d-md-block">
                  ${msg.userAvatar ? `
                    <img src="${msg.userAvatar}" alt="${msg.username}'s avatar" class="message-avatar">
                  ` : `
                    <div class="message-avatar-placeholder">
                      ${msg.username.charAt(0).toUpperCase()}
                    </div>
                  `}
                </div>
              ` : ''}
            </div>
          `;
          
          messageContainer.innerHTML = messageContent;
          chatMessages.appendChild(messageContainer);
          
          // Auto-scroll to bottom
          chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function showInviteModal() {
          const roomLink = document.getElementById('roomLink');
          roomLink.value = `${window.location.origin}/room/${roomId}`;
          inviteUserModal.show();
        }
        
        function copyRoomLink() {
          const roomLink = `${window.location.origin}/room/${roomId}`;
          navigator.clipboard.writeText(roomLink)
            .then(() => {
              // Show success message
              const toast = document.createElement('div');
              toast.className = 'position-fixed bottom-0 end-0 p-3';
              toast.style.zIndex = '11';
              toast.innerHTML = `
                <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                  <div class="toast-header">
                    <strong class="me-auto">Notification</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                  </div>
                  <div class="toast-body">
                    Room link copied to clipboard!
                  </div>
                </div>
              `;
              document.body.appendChild(toast);
              setTimeout(() => {
                document.body.removeChild(toast);
              }, 3000);
            })
            .catch(() => {
              alert('Failed to copy room link');
            });
        }
        
        // Quiz game functionality
        function showPlayGameModal() {
          // Reset game state
          document.getElementById('questionSection').style.display = 'block';
          document.getElementById('resultsSection').style.display = 'none';
          document.getElementById('finalResultsSection').style.display = 'none';
          
          // Set mock question data
          const mockQuestion = {
            text: "What is the capital of France?",
            options: ["Berlin", "Paris", "London", "Madrid"],
            correctOption: 1,
            timeLimit: 30
          };
          
          // Update UI
          document.getElementById('questionText').textContent = mockQuestion.text;
          document.getElementById('currentQuestionNumber').textContent = '1';
          document.getElementById('totalQuestions').textContent = '5';
          document.getElementById('timerDisplay').textContent = `${mockQuestion.timeLimit}s`;
          
          // Generate answer options
          const answerOptions = document.getElementById('answerOptions');
          answerOptions.innerHTML = '';
          
          mockQuestion.options.forEach((option, index) => {
            const col = document.createElement('div');
            col.className = 'col-md-6';
            col.innerHTML = `
              <button class="btn btn-outline-primary w-100 p-3 answer-option" data-index="${index}">
                <div class="d-flex align-items-center">
                  <span class="option-letter">${String.fromCharCode(65 + index)}</span>
                  <span class="ms-3">${option}</span>
                </div>
              </button>
            `;
            answerOptions.appendChild(col);
          });
          
          // Add event listeners to options
          document.querySelectorAll('.answer-option').forEach(btn => {
            btn.addEventListener('click', function() {
              const selectedIndex = this.dataset.index;
              selectAnswer(selectedIndex);
            });
          });
          
          // Start timer
          startQuestionTimer(mockQuestion.timeLimit);
          
          // Show modal
          playGameModal.show();
        }
        
        function selectAnswer(index) {
          // Highlight selected answer
          document.querySelectorAll('.answer-option').forEach(btn => {
            btn.classList.remove('btn-primary');
            btn.classList.add('btn-outline-primary');
          });
          
          const selectedButton = document.querySelector(`.answer-option[data-index="${index}"]`);
          if (selectedButton) {
            selectedButton.classList.remove('btn-outline-primary');
            selectedButton.classList.add('btn-primary');
          }
          
          // For demo purposes, show results after a short delay
          setTimeout(() => {
            showQuestionResults();
          }, 1500);
        }
        
        function startQuestionTimer(seconds) {
          let timeLeft = seconds;
          const timerBar = document.getElementById('timerBar');
          const timerDisplay = document.getElementById('timerDisplay');
          
          // Reset timer bar
          timerBar.style.width = '100%';
          timerBar.className = 'progress-bar bg-success';
          
          const timerInterval = setInterval(() => {
            timeLeft--;
            const percentage = (timeLeft / seconds) * 100;
            
            timerBar.style.width = `${percentage}%`;
            timerDisplay.textContent = `${timeLeft}s`;
            
            // Update color based on time remaining
            if (timeLeft <= 10) {
              timerBar.className = 'progress-bar bg-danger';
            } else if (timeLeft <= 20) {
              timerBar.className = 'progress-bar bg-warning';
            }
            
            if (timeLeft <= 0) {
              clearInterval(timerInterval);
              showQuestionResults();
            }
          }, 1000);
        }
        
        function showQuestionResults() {
          // Hide question section
          document.getElementById('questionSection').style.display = 'none';
          
          // Show results section
          document.getElementById('resultsSection').style.display = 'block';
          
          // Mock results data
          const mockResults = [
            { player: 'Alice', answer: 'Paris', correct: true, time: '3.2s' },
            { player: 'Bob', answer: 'London', correct: false, time: '4.1s' },
            { player: currentUsername, answer: 'Paris', correct: true, time: '2.8s' }
          ];
          
          // Populate results table
          const resultsTableBody = document.getElementById('resultsTableBody');
          resultsTableBody.innerHTML = '';
          
          mockResults.forEach(result => {
            const row = document.createElement('tr');
            row.className = result.player === currentUsername ? 'table-primary' : '';
            row.innerHTML = `
              <td>${result.player} ${result.player === currentUsername ? '(You)' : ''}</td>
              <td>${result.answer}</td>
              <td>
                <span class="badge ${result.correct ? 'bg-success' : 'bg-danger'}">
                  ${result.correct ? 'Correct' : 'Incorrect'}
                </span>
              </td>
              <td>${result.time}</td>
            `;
            resultsTableBody.appendChild(row);
          });
          
          // For demo purposes, move to next question or show final results after a delay
          const currentQuestionNumber = parseInt(document.getElementById('currentQuestionNumber').textContent);
          const totalQuestions = parseInt(document.getElementById('totalQuestions').textContent);
          
          setTimeout(() => {
            if (currentQuestionNumber < totalQuestions) {
              // Move to next question
              document.getElementById('currentQuestionNumber').textContent = currentQuestionNumber + 1;
              document.getElementById('questionSection').style.display = 'block';
              document.getElementById('resultsSection').style.display = 'none';
              
              // Change question text for demo
              document.getElementById('questionText').textContent = "Which planet is known as the Red Planet?";
              
              // Update answer options
              const answerOptions = document.querySelectorAll('.answer-option');
              const newOptions = ["Mars", "Venus", "Jupiter", "Mercury"];
              answerOptions.forEach((option, index) => {
                option.querySelector('.ms-3').textContent = newOptions[index];
              });
              
              // Restart timer
              startQuestionTimer(30);
            } else {
              // Show final results
              showFinalResults();
            }
          }, 5000);
        }
        
        function showFinalResults() {
          // Hide previous sections
          document.getElementById('questionSection').style.display = 'none';
          document.getElementById('resultsSection').style.display = 'none';
          
          // Show final results section
          document.getElementById('finalResultsSection').style.display = 'block';
          
          // Mock final results data
          const mockFinalResults = [
            { rank: 1, player: currentUsername, score: 950, correct: 5 },
            { rank: 2, player: 'Alice', score: 820, correct: 4 },
            { rank: 3, player: 'Bob', score: 650, correct: 3 }
          ];
          
          // Populate final results table
          const finalResultsTableBody = document.getElementById('finalResultsTableBody');
          finalResultsTableBody.innerHTML = '';
          
          mockFinalResults.forEach(result => {
            const row = document.createElement('tr');
            row.className = result.player === currentUsername ? 'table-primary' : '';
            
            let rankCell = `<td>${result.rank}</td>`;
            if (result.rank === 1) {
              rankCell = `<td><span class="badge bg-warning text-dark">1st</span></td>`;
            } else if (result.rank === 2) {
              rankCell = `<td><span class="badge bg-secondary">2nd</span></td>`;
            } else if (result.rank === 3) {
              rankCell = `<td><span class="badge bg-danger">3rd</span></td>`;
            }
            
            row.innerHTML = `
              ${rankCell}
              <td>${result.player} ${result.player === currentUsername ? '(You)' : ''}</td>
              <td>${result.score}</td>
              <td>${result.correct}/5</td>
            `;
            finalResultsTableBody.appendChild(row);
          });
          
          // Add event listener to restart button
          document.getElementById('restartGameBtn').addEventListener('click', function() {
            // Restart the game
            document.getElementById('finalResultsSection').style.display = 'none';
            showPlayGameModal();
          });
        }
        
        // Add some initial messages for demo
        setTimeout(() => {
          if (currentUsername) {
            addMessage({
              username: 'System',
              message: `Welcome to the room, ${currentUsername}!`,
              userAvatar: '',
              timestamp: new Date().toISOString()
            });
            
            addMessage({
              username: 'Alice',
              message: 'Hi everyone! Are we ready for some quiz challenges?',
              userAvatar: '',
              timestamp: new Date().toISOString()
            });
            
            addMessage({
              username: 'Bob',
              message: 'I added some new questions about science and history!',
              userAvatar: '',
              timestamp: new Date().toISOString()
            });
          }
        }, 1000);
      });
    </script>
  </div>
</body>
</html>