<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat Page</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body {
      background-color: #f5f7fa;
    }
    
    .chat-page-container {
      min-height: 100vh;
    }
    
    .room-sidebar {
      height: 100%;
    }
    
    .member-avatar, .room-avatar, .message-avatar, .message-avatar-placeholder {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #e9ecef;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      color: #495057;
    }
    
    .room-avatar {
      background-color: #3498db;
      color: white;
    }
    
    .message-avatar {
      width: 32px;
      height: 32px;
      object-fit: cover;
    }
    
    .message-avatar-placeholder {
      width: 32px;
      height: 32px;
      font-size: 14px;
    }
    
    .member-list {
      max-height: calc(100vh - 260px);
      overflow-y: auto;
    }
    
    .message-bubble {
      position: relative;
      padding: 10px 15px;
      border-radius: 18px;
      max-width: 75%;
      word-wrap: break-word;
      display: inline-block;
    }
    
    .current-user-bubble {
      background-color: #3498db;
      color: white;
      border-bottom-right-radius: 4px;
    }
    
    .other-user-bubble {
      background-color: #e9ecef;
      color: #212529;
      border-bottom-left-radius: 4px;
    }
    
    .message-content-wrapper {
      max-width: 80%;
    }
    
    .message-time {
      font-size: 11px;
      opacity: 0.8;
      margin-left: 8px;
      white-space: nowrap;
    }
    
    .message-username {
      font-size: 13px;
      margin-bottom: 2px;
      color: #6c757d;
    }
    
    .room-title {
      max-width: 200px;
    }
    
    @media (max-width: 768px) {
      .chat-messages {
        height: calc(100vh - 300px) !important;
      }
    }
  </style>
</head>
<body>
  <div class="chat-page-container min-vh-100 d-flex flex-column">
    <!-- Navbar placeholder -->
   
    
    
    <div class="container-fluid flex-grow-1 py-4 px-lg-5">
      <div class="row h-100 g-4">
        <!-- Left Sidebar - Members & Options -->
        <div class="col-lg-3 d-none d-lg-block">
          <div class="card room-sidebar shadow-sm h-100">
            <div class="card-header bg-primary text-white py-3">
              <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0 text-truncate">
                  Room Members <span class="badge bg-light text-dark member-count" id="memberCount">0</span>
                </h5>
                <button class="btn btn-light btn-sm rounded-circle p-1" id="manageMembers">
                  <i class="fas fa-users-gear"></i>
                </button>
              </div>
            </div>
            <div class="card-body p-0 member-list">
              <div class="p-3">
                <div class="input-group input-group-sm mb-3">
                  <input type="text" class="form-control" placeholder="Search members..." aria-label="Search members">
                </div>
              </div>
              <ul class="list-group list-group-flush" id="membersList">
                <!-- Members will be dynamically populated here -->
              </ul>
            </div>
            <div class="card-footer p-3 bg-white">
              <button class="btn btn-primary w-100 d-flex align-items-center justify-content-center" id="inviteBtn">
                <i class="fas fa-user-plus me-2"></i>
                Invite Others
              </button>
            </div>
          </div>
        </div>
        
        <!-- Main Chat Area -->
        <div class="col-lg-9 col-md-12">
          <div class="card chat-container shadow-sm h-100">
            <div class="card-header d-flex justify-content-between align-items-center py-3">
              <div class="d-flex align-items-center">
                <div class="room-avatar me-2" id="roomAvatar">R</div>
                <div>
                  <h5 class="mb-0 room-title text-truncate" title="Room Name" id="roomName">Room Name</h5>
                  <small class="text-muted">
                    <span id="memberCount">0</span> members • Active now
                  </small>
                </div>
              </div>
              
              <div class="d-flex">
                <button class="btn btn-success d-flex align-items-center me-2" id="playQuizBtn">
                  <i class="fas fa-play me-2"></i>
                  <span class="d-none d-md-inline">Play Quiz</span>
                </button>
                
                <div class="dropdown">
                  <button class="btn btn-light dropdown-toggle rounded-circle p-2" type="button" id="dropdownRoomOptions" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-vertical"></i>
                  </button>
                  <ul class="dropdown-menu shadow-sm border-0" aria-labelledby="dropdownRoomOptions">
                    <li><a class="dropdown-item" href="#" id="addQuizBtn">
                      <i class="fas fa-circle-question me-2 text-primary"></i>
                      Add Quiz
                    </a></li>
                    <li><a class="dropdown-item" href="#" id="changeRoomNameBtn">
                      <i class="fas fa-arrows-left-right me-2 text-danger"></i>
                      Change Room Name
                    </a></li>
                    <li><a class="dropdown-item" href="#" id="manageMembersBtn">
                      <i class="fas fa-users-gear me-2 text-secondary"></i>
                      Manage Members
                    </a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#" id="copyRoomLinkBtn">
                      <i class="fas fa-copy me-2 text-info"></i>
                      Copy Room Link
                    </a></li>
                  </ul>
                </div>
              </div>
            </div>
            
            <div class="card-body p-0 position-relative">
              <div class="chat-messages p-3" id="chatMessages" style="height: calc(100vh - 260px); overflow-y: auto">
                <div class="text-center py-5 text-muted" id="welcomeMessage">
                  <i class="fas fa-display fs-1 mb-3 text-primary opacity-50"></i>
                  <h5>Welcome to the Room!</h5>
                  <p>Start chatting or play a quiz with your friends.</p>
                </div>
                
                <!-- Messages will be dynamically populated here -->
              </div>
            </div>
            
            <div class="card-footer p-3 bg-white">
              <form id="messageForm">
                <div class="input-group">
                  <input type="text" class="form-control py-2" placeholder="Type a message..." id="messageInput">
                  <button class="btn btn-primary d-flex align-items-center" type="submit" id="sendBtn">
                    <i class="fas fa-paper-plane"></i>
                    <span class="ms-2 d-none d-md-inline">Send</span>
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Mobile bottom navigation bar -->
    <div class="d-lg-none fixed-bottom bg-white shadow-lg p-2 border-top">
      <div class="row text-center g-0">
        <div class="col-3">
          <button class="btn btn-light rounded-circle p-2" id="mobileManageMembers">
            <i class="fas fa-users-gear"></i>
            <div class="small mt-1">Members</div>
          </button>
        </div>
        <div class="col-3">
          <button class="btn btn-light rounded-circle p-2" id="mobileInvite">
            <i class="fas fa-user-plus"></i>
            <div class="small mt-1">Invite</div>
          </button>
        </div>
        <div class="col-3">
          <button class="btn btn-light rounded-circle p-2" id="mobileAddQuiz">
            <i class="fas fa-circle-question"></i>
            <div class="small mt-1">Quiz</div>
          </button>
        </div>
        <div class="col-3">
          <button class="btn btn-light rounded-circle p-2" id="mobilePlay">
            <i class="fas fa-play"></i>
            <div class="small mt-1">Play</div>
          </button>
        </div>
      </div>
    </div>
    
    <!-- Modals -->
    <!-- Choose Name Modal -->
    <div class="modal fade" id="choiceNameModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Choose a Username</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="usernameForm">
              <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <input type="text" class="form-control" id="username" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Select Avatar</label>
                <div class="d-flex flex-wrap gap-2">
                  <div class="avatar-option">
                    <input type="radio" name="avatar" id="avatar1" value="avatar1.png" class="d-none">
                    <label for="avatar1" class="avatar-label">A</label>
                  </div>
                  <div class="avatar-option">
                    <input type="radio" name="avatar" id="avatar2" value="avatar2.png" class="d-none">
                    <label for="avatar2" class="avatar-label">B</label>
                  </div>
                  <div class="avatar-option">
                    <input type="radio" name="avatar" id="avatar3" value="avatar3.png" class="d-none">
                    <label for="avatar3" class="avatar-label">C</label>
                  </div>
                </div>
              </div>
              <button type="submit" class="btn btn-primary w-100">Join Room</button>
            </form>
          </div>
        </div>
      </div>
    </div>
    
    <div class="modal fade" id="addQuizModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Add Quiz</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="quizForm">
              <div class="mb-3">
                <label for="questionText" class="form-label">Question</label>
                <input type="text" class="form-control" id="questionText" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Options</label>
                <div class="option-container">
                  <div class="input-group mb-2">
                    <span class="input-group-text">A</span>
                    <input type="text" class="form-control" name="option" required>
                    <div class="input-group-text">
                      <input class="form-check-input" type="radio" name="correctOption" value="0" required>
                    </div>
                  </div>
                  <div class="input-group mb-2">
                    <span class="input-group-text">B</span>
                    <input type="text" class="form-control" name="option" required>
                    <div class="input-group-text">
                      <input class="form-check-input" type="radio" name="correctOption" value="1">
                    </div>
                  </div>
                  <div class="input-group mb-2">
                    <span class="input-group-text">C</span>
                    <input type="text" class="form-control" name="option" required>
                    <div class="input-group-text">
                      <input class="form-check-input" type="radio" name="correctOption" value="2">
                    </div>
                  </div>
                  <div class="input-group mb-2">
                    <span class="input-group-text">D</span>
                    <input type="text" class="form-control" name="option" required>
                    <div class="input-group-text">
                      <input class="form-check-input" type="radio" name="correctOption" value="3">
                    </div>
                  </div>
                </div>
              </div>
              <button type="submit" class="btn btn-primary">Add Question</button>
            </form>
          </div>
        </div>
      </div>
    </div>
    
    <!-- View Members Modal -->
    <div class="modal fade" id="viewMembersModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Room Members</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <ul class="list-group" id="modalMembersList">
              <!-- Members will be populated here -->
            </ul>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Change Room Name Modal -->
    <div class="modal fade" id="changeRoomNameModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Change Room Name</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="roomNameForm">
              <div class="mb-3">
                <label for="newRoomName" class="form-label">New Room Name</label>
                <input type="text" class="form-control" id="newRoomName" required>
              </div>
              <button type="submit" class="btn btn-primary">Save Changes</button>
            </form>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Invite User Modal -->
    <div class="modal fade" id="inviteUserModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Invite Others</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label class="form-label">Room Link</label>
              <div class="input-group">
                <input type="text" class="form-control" id="roomLink" readonly>
                <button class="btn btn-outline-primary" type="button" id="copyLink">
                  <i class="fas fa-copy"></i>
                </button>
              </div>
            </div>
            <div class="d-grid gap-2">
              <button class="btn btn-primary" id="shareBtn">
                <i class="fas fa-share-nodes me-2"></i>
                Share
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Play Game Modal -->
    <div class="modal fade" id="playGameModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Quiz Game</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeQuizGame"></button>
          </div>
          <div class="modal-body">
            <div id="gameContainer">
              <!-- Question Section -->
              <div id="questionSection">
                <div class="progress mb-3">
                  <div class="progress-bar" id="timerBar" role="progressbar" style="width: 100%"></div>
                </div>
                
                <div class="d-flex justify-content-between align-items-center mb-2">
                  <span class="badge bg-primary">Question <span id="currentQuestionNumber">1</span>/<span id="totalQuestions">5</span></span>
                  <span class="badge bg-secondary" id="timerDisplay">30s</span>
                </div>
                
                <div class="card mb-4">
                  <div class="card-body">
                    <h4 id="questionText">Question text will appear here</h4>
                  </div>
                </div>
                
                <div class="row g-3" id="answerOptions">
                  <!-- Answer options will be added here -->
                </div>
              </div>
              
              <!-- Results Section -->
              <div id="resultsSection" style="display: none;">
                <h4 class="mb-3">Results</h4>
                <div class="table-responsive">
                  <table class="table table-bordered">
                    <thead>
                      <tr>
                        <th>Player</th>
                        <th>Answer</th>
                        <th>Correct?</th>
                        <th>Time</th>
                      </tr>
                    </thead>
                    <tbody id="resultsTableBody">
                      <!-- Results will be populated here -->
                    </tbody>
                  </table>
                </div>
              </div>
              
              <!-- Final Results Section -->
              <div id="finalResultsSection" style="display: none;">
                <h4 class="mb-3 text-center">Final Results</h4>
                <div class="table-responsive">
                  <table class="table table-striped">
                    <thead>
                      <tr>
                        <th>Rank</th>
                        <th>Player</th>
                        <th>Score</th>
                        <th>Correct Answers</th>
                      </tr>
                    </thead>
                    <tbody id="finalResultsTableBody">
                      <!-- Final results will be populated here -->
                    </tbody>
                  </table>
                </div>
                <div class="d-grid gap-2 col-md-6 mx-auto mt-4">
                  <button class="btn btn-primary" id="restartGameBtn">
                    <i class="fas fa-rotate-right me-2"></i>Play Again
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
       let user;
      
  document.addEventListener('DOMContentLoaded', function() {
    // Get room ID from URL
    const urlParts = window.location.pathname.split('/');
    const roomId = urlParts[urlParts.length - 1];
    
    user = {{{user}}};
    
   try {
    // Kiểm tra đăng nhập
    if (!user) {
      throw new Error("Bạn cần đăng nhập để truy cập phòng chat");
    }
  
    
    console.log("Username from server:", user.username);
    
    // Không cần modal chọn username nữa
    const choiceNameModal = document.getElementById('choiceNameModal');
    if (choiceNameModal) {
      choiceNameModal.remove();
    }
    
    // Phần join room sẽ được xử lý ở code khác
    
  } catch (error) {
    // Hiển thị SweetAlert và tự động chuyển hướng
    Swal.fire({
      icon: 'error',
      title: 'Đăng nhập cần thiết',
      text: error.message || "Bạn cần đăng nhập để sử dụng tính năng này",
      confirmButtonText: 'Chuyển hướng trong 2s...',
      confirmButtonColor: '#3085d6',
      timer: 2000,  // Tự động đóng sau 2 giây
      timerProgressBar: true,  // Hiển thị thanh tiến trình
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
        const timer = Swal.getPopup().querySelector('b');
        timerInterval = setInterval(() => {
          timer.textContent = `${Swal.getTimerLeft() / 1000 | 0}`;
        }, 100);
      },
      willClose: () => {
        clearInterval(timerInterval);
      }
    }).then((result) => {
      // Chuyển hướng sau khi SweetAlert đóng
      window.location.href = '/auth/login?returnUrl=' + encodeURIComponent(window.location.pathname);
    });
    
    console.error("Authentication error:", error);
  }


    console.log("Username from server:", user.username);
    
    if (!user.username || user.username === "null" || user.username === "") {
      console.log("No username provided, redirecting to login");
      window.location.href = '/auth/login?returnUrl=' + encodeURIComponent(window.location.pathname);
      return;
    }
    
    // No need for username choice modal since we're using the authenticated user's username
    const choiceNameModal = document.getElementById('choiceNameModal');
    if (choiceNameModal) {
      choiceNameModal.remove();
    }
    
    // Connect to WebSocket and join room
    joinRoom(user.username, roomId);
  });
  
  function joinRoom(username, roomId) {
    console.log(`Joining room ${roomId} as ${username}`);
    
    // Initialize socket connection
    const socket = new WebSocket(`${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//{{WEBSOCKET_URL}}`);
    
    socket.onopen = function() {
      console.log("WebSocket connection established");
      
      // Join the room once connection is established
      socket.send(JSON.stringify({
        type: "join_room",
        roomId: roomId,
        username: username,
        avatar: user.avatar
      }));
      
      // Update UI elements
      if (document.getElementById('currentUserDisplay')) {
        document.getElementById('currentUserDisplay').textContent = username;
      }
      
      // Update room link for invitation
      const roomLink = window.location.origin + window.location.pathname;
      if (document.getElementById('roomLink')) {
        document.getElementById('roomLink').value = roomLink;
      }
    };
    
    socket.onmessage = function(event) {
      const data = JSON.parse(event.data);
      console.log("Received message:", data);
      
      // Handle different message types
      switch(data.type) {
        case "playerList":
        console.log("Updating player list with data:", data.players);
          updateMembersList(data.players);
          document.querySelectorAll('.member-count').forEach(el => {
            el.textContent = data.players.length;
          });
          break;
          
        case "message":
          addMessageToChat(data);
          break;
          
        case "start_game":
          console.log("Game is starting");
          // Show game modal
          const playGameModal = new bootstrap.Modal(document.getElementById('playGameModal'));
          playGameModal.show();
          break;
          
        case "question":
          displayQuestion(data.question, data.questionNumber, data.totalQuestions);
          break;
          
        case "all_answers":
          displayAnswerResults(data.answers, data.correctAnswer);
          break;
          
        case "end_game":
          displayFinalResults(data.results);
          break;
          
        case "error":
          console.error("Error from server:", data.message);
          alert(data.message);
          break;
      }
    };
    
    socket.onerror = function(error) {
      console.error("WebSocket error:", error);
    };
    
    socket.onclose = function() {
      console.log("WebSocket connection closed");
    };
    
    // Handle sending messages
    document.getElementById('messageForm').addEventListener('submit', function(e) {
      e.preventDefault();
      const messageInput = document.getElementById('messageInput');
      const message = messageInput.value.trim();
      
      if (message && socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify({
          type: "message",
          roomId: roomId,
          username: username,
          avatar: user.avatar,
          message: message
        }));
        messageInput.value = '';
      }
    });
    
    // Handle starting a game
    document.getElementById('playQuizBtn').addEventListener('click', function() {
      if (socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify({
          type: "start_game",
          roomId: roomId
        }));
      }
    });
    
    // Mobile play button
    document.getElementById('mobilePlay').addEventListener('click', function() {
      if (socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify({
          type: "start_game",
          roomId: roomId
        }));
      }
    });
  }
  
  function addMessageToChat(data) {
    console.log("Adding message to chat:", data);
    const chatMessages = document.getElementById('chatMessages');
    const welcomeMessage = document.getElementById('welcomeMessage');
    
    // Hide welcome message if it exists
    if (welcomeMessage) {
      welcomeMessage.style.display = 'none';
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `d-flex mb-3 ${data.username === user.username ? 'justify-content-end' : 'justify-content-start'}`;
    
    const messageContent = `
      ${data.username !== user.username ? 
        data.avatar ? 
          `<img src="${data.avatar}" class="message-avatar me-2" alt="${data.username}">` :
          `<div class="message-avatar-placeholder me-2">${data.username.charAt(0)}</div>`
        : ''}
      <div class="message-content-wrapper">
        ${data.username !== user.username ? `
          <div class="message-username">${data.username}</div>
        ` : ''}
        <div class="d-flex align-items-end">
          <div class="message-bubble ${data.username === user.username ? 'current-user-bubble' : 'other-user-bubble'}">
            ${data.message}
          </div>
          <span class="message-time">${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span>
        </div>
      </div>
      ${data.username === user.username ? 
        data.avatar ? 
          `<img src="${data.avatar}" class="message-avatar ms-2" alt="${data.username}">` :
          `<div class="message-avatar-placeholder ms-2">${data.username.charAt(0)}</div>`
        : ''}
    `;
    
    messageDiv.innerHTML = messageContent;
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }
  
  function updateMembersList(members) {
    const membersList = document.getElementById('membersList');
    const modalMembersList = document.getElementById('modalMembersList');
    
    if (membersList) {
      membersList.innerHTML = '';
      
      members.forEach(member => {
        const memberItem = document.createElement('li');
        memberItem.className = 'list-group-item d-flex align-items-center';
        
       memberItem.innerHTML = `
          ${member.avatar ? 
            `<img src="${member.avatar}" class="member-avatar me-2" alt="${member.username}">` :
            `<div class="member-avatar me-2">${member.username.charAt(0)}</div>`
          }
          <div class="member-name flex-grow-1">${member.username}</div>
        `;
        
        membersList.appendChild(memberItem);
      });
    }
    
    if (modalMembersList) {
      modalMembersList.innerHTML = '';
      
      members.forEach(username => {
        const memberItem = document.createElement('li');
        memberItem.className = 'list-group-item d-flex align-items-center';
        
        memberItem.innerHTML = `
          <div class="member-avatar me-2">${username.charAt(0)}</div>
          <div class="member-name flex-grow-1">${username}</div>
        `;
        
        modalMembersList.appendChild(memberItem);
      });
    }
  }
  
  function displayQuestion(question, currentNumber, totalQuestions) {
    // Update question number display
    document.getElementById('currentQuestionNumber').textContent = currentNumber;
    document.getElementById('totalQuestions').textContent = totalQuestions;
    
    // Update question text
    document.getElementById('questionText').textContent = question.content;
    
    // Clear and populate answer options
    const answersContainer = document.getElementById('answerOptions');
    answersContainer.innerHTML = '';
    
    question.options.forEach((option, index) => {
      const optionCol = document.createElement('div');
      optionCol.className = 'col-md-6';
      
      const optionBtn = document.createElement('button');
      optionBtn.className = 'btn btn-outline-primary w-100 p-3 h-100 d-flex align-items-center';
      optionBtn.textContent = option.content;
      optionBtn.dataset.index = index;
      
      optionBtn.addEventListener('click', function() {
        // Disable all buttons
        document.querySelectorAll('#answerOptions button').forEach(btn => {
          btn.disabled = true;
        });
        
        // Highlight selected answer
        this.classList.add('btn-primary');
        this.classList.remove('btn-outline-primary');
        
        // Submit answer
        socket.send(JSON.stringify({
          type: 'submit_answer',
          answer: parseInt(this.dataset.index),
          username: user.username
        }));
      });
      
      optionCol.appendChild(optionBtn);
      answersContainer.appendChild(optionCol);
    });
    
    // Show question section, hide results
    document.getElementById('questionSection').style.display = 'block';
    document.getElementById('resultsSection').style.display = 'none';
    document.getElementById('finalResultsSection').style.display = 'none';
  }
  
  function displayAnswerResults(answers, correctAnswerIndex) {
    // Implementation details for showing answer results
  }
  
  function displayFinalResults(results) {
    // Implementation details for showing final game results
  }
    </script>
     

  </div>
</body>
</html>