{{#section 'css'}}
<link rel="stylesheet" href="/css/admin.css">
{{/section}}

<div class="content-wrapper">
    <div class="page-header">
        <div class="page-title">
            <h1>{{pageTitle}}</h1>
            <p>Manage your quizzes and questions</p>
        </div>
        <button class="btn-add-quiz" id="addQuizBtn">
            <i class="fas fa-plus"></i>
            Add Quiz
        </button>
    </div>

    <div class="table-responsive">
        <table class="quiz-table">
            <thead>
                <tr>
                    <th class="column-small">#</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Category</th>
                    {{!-- <th>Tags</th> --}}
                    {{!-- Removed Image Header --}}
                    <th>Created at</th>
                   
                    <th>Actions</th>
                    <th>Questions</th>
                </tr>
            </thead>
            <tbody id="quizTableBody">
                {{#if quizzes}}
                {{#each quizzes}}
                <tr id="quiz-{{this.id}}">
                    <td>{{this.rowNumber}}</td>
                    <td class="quiz-title">{{this.title}}</td>
                    <td class="quiz-description">{{this.description}}</td>
                    <td class="quiz-category">{{this.categoryName}}</td>
                    {{!-- <td class="quiz-tags">{{this.tagsString}}</td> --}}
                    {{!-- Removed Image Data Cell --}}
                    
                    <td>
                        <span
                            class="badge-updated {{#if (or (eq this.relativeUpdatedAt 'a few seconds ago') (eq this.relativeUpdatedAt 'in a few seconds'))}}today{{/if}}">
                            {{this.relativeUpdatedAt}}
                        </span>
                    </td>
                    <td class="actions-cell">
                        <button class="btn-edit" data-id="{{this.id}}" data-title="{{this.title}}"
                            data-desc="{{this.description}}" data-category="{{this.categoryName}}"
                            data-tags="{{this.tagsString}}" data-image="{{this.imageUrl}}">

                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn-delete" data-id="{{this.id}}" data-title="{{this.title}}">
                            Delete
                        </button>
                    </td>
                    <td>
                        <a href="/quiz/question/{{this.id}}" class="btn-go">
                            <i class="fas fa-question-circle"></i> Go
                        </a>
                    </td>
                </tr>
                {{/each}}
                {{else}}
                {{!-- Adjusted colspan from 10 to 9 --}}
                <tr>
                    <td colspan="9" style="text-align: center; padding: 20px;">No quizzes found.</td>
                </tr>
                {{/if}}
            </tbody>
        </table>
    </div>
</div>

<div id="addQuizModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Add New Quiz</h2>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <form id="addQuizForm" enctype="multipart/form-data">
                <div class="form-group">
                    <label for="quizTitle">Title</label>
                    <input type="text" id="quizTitle" name="quizTitle" required>
                </div>
                <div class="form-group">
                    <label for="quizDescription">Description</label>
                    <textarea id="quizDescription" name="quizDescription" rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label for="quizCategory">Category</label>
                    <select id="quizCategory" name="categoryId" required>
                        <option value="">Select a category</option>
                        <option value="1">Academic</option>
                        <option value="2">Entertainment</option>
                        <option value="3">Professional</option>
                        <option value="4">Personality</option>
                        <option value="5">Knowledge</option>
                        <option value="6">Education</option>
                        <option value="7">Language</option>
                        <option value="8">Technical</option>
                        <option value="9">Health</option>
                        <option value="10">Trivia</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="quizTags">Tags</label>
                    <input type="text" id="quizTags" name="tag" placeholder="Enter tags separated by commas">
                </div>
                <div class="form-group">
                    <label for="quizImage">Image</label>
                    <div class="image-upload-container">
                        <input type="file" id="quizImage" name="quizMedia" accept="image/*">
                        <div class="image-preview" id="imagePreview"></div>
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-cancel">Cancel</button>
                    <button type="submit" class="btn-submit">Add Quiz & Go to Questions</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div id="editQuizModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Edit Quiz</h2>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <form id="editQuizForm">
                <input type="hidden" id="editQuizId" name="quizId">
                <div class="form-group">
                    <label for="editQuizTitle">Title</label>
                    <input type="text" id="editQuizTitle" name="quizTitle" required>
                </div>
                <div class="form-group">
                    <label for="editQuizDescription">Description</label>
                    <textarea id="editQuizDescription" name="quizDescription" rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label for="editQuizCategory">Category</label>
                    <select id="editQuizCategory" name="categoryId" required>
                        <option value="">Select a category</option>
                        <option value="1">Academic</option>
                        <option value="2">Entertainment</option>
                        <option value="3">Professional</option>
                        <option value="4">Personality</option>
                        <option value="5">Knowledge</option>
                        <option value="6">Education</option>
                        <option value="7">Language</option>
                        <option value="8">Technical</option>
                        <option value="9">Health</option>
                        <option value="10">Trivia</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="editQuizTags">Tags</label>
                    <input type="text" id="editQuizTags" name="tag" placeholder="Enter tags separated by commas">
                </div>
                <div class="form-group">
                    <label for="editQuizImage">Image</label>
                    <div class="image-upload-container">
                        <input type="file" id="editQuizImage" name="quizMedia" accept="image/*">
                        <div class="image-preview" id="editImagePreview">
                            <img id="currentQuizImage" src="https://placehold.co/100x100/e1e1e1/909090?text=Current"
                                alt="Current quiz image" class="preview-image">
                        </div>
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-cancel">Cancel</button>
                    <button type="submit" class="btn-submit">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div id="deleteQuizModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Delete Quiz</h2>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <p>Are you sure you want to delete the quiz "<span id="deleteQuizTitle"></span>"?</p>
            <p class="warning-text">This action cannot be undone.</p>
            <div class="form-actions">
                <button type="button" class="btn-cancel">Cancel</button>
                <button type="button" id="confirmDelete" class="btn-delete-confirm">Delete</button>
            </div>
        </div>
    </div>
</div>

<div id="toastNotification" class="toast">
    <div class="toast-content">
        <i class="fas fa-check-circle"></i>
        <div class="toast-message">
            <span id="toastMessage">Action completed successfully!</span>
        </div>
    </div>
    <div class="toast-progress"></div>
</div>


{{#section 'scripts'}}
<script>


    // --- DOM Element References ---
    const addQuizBtn = document.getElementById('addQuizBtn');
    const addQuizModalEl = document.getElementById('addQuizModal');
    const editQuizModalEl = document.getElementById('editQuizModal');
    const deleteQuizModalEl = document.getElementById('deleteQuizModal');
    const toastNotificationEl = document.getElementById('toastNotification');
    const addQuizForm = document.getElementById('addQuizForm');
    const editQuizForm = document.getElementById('editQuizForm');
    const deleteQuizTitle = document.getElementById('deleteQuizTitle');
    const confirmDeleteBtn = document.getElementById('confirmDelete');
    const quizTableBody = document.getElementById('quizTableBody');
    const modalCloseButtons = document.querySelectorAll('.modal .close');
    const modalCancelButtons = document.querySelectorAll('.modal .btn-cancel');
    const toastMessage = document.getElementById('toastMessage');
    const imagePreview = document.getElementById('imagePreview');
    const editImagePreview = document.getElementById('editImagePreview');
    const quizImageInput = document.getElementById('quizImage');
    const editQuizImageInput = document.getElementById('editQuizImage');

    // --- State Variable ---
    let currentQuizIdToDelete = null;

    // --- Helper Functions (Define BEFORE use) ---

    function showToast(message, isError = false) {
        if (!toastNotificationEl || !toastMessage) {
            console.warn('Toast elements not found, logging message:', message);
            alert(message); // Fallback
            return;
        }
        toastMessage.innerText = message;
        const icon = toastNotificationEl.querySelector('i');
        if (isError) {
            toastNotificationEl.style.backgroundColor = '#d9534f';
            if (icon) icon.className = 'fas fa-exclamation-circle text-white';
        } else {
            toastNotificationEl.style.backgroundColor = '#333';
            if (icon) icon.className = 'fas fa-check-circle text-success';
        }
        toastNotificationEl.classList.add('show');
        const progress = toastNotificationEl.querySelector('.toast-progress');
        if (progress) {
            progress.style.animation = 'none';
            progress.offsetHeight; /* trigger reflow */
            progress.style.animation = '';
        }
        setTimeout(() => {
            toastNotificationEl.classList.remove('show');
        }, 3000);
    }

    function closeModals() {
        console.log("Closing modals...");
        [addQuizModalEl, editQuizModalEl, deleteQuizModalEl].forEach(modal => {
            if (modal) modal.classList.remove('show');
        });
    }

    function openAddQuizModal() {
        console.log("Opening Add Quiz Modal...");
        addQuizModal.classList.add('show');
    }

    function handleImagePreview(input, previewElement) {
        if (previewElement) previewElement.innerHTML = '';
        if (input.files && input.files[0]) {
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = document.createElement('img');
                img.src = e.target.result;
                img.alt = "Image preview";
                img.className = "preview-image"; // Make sure this class styles the image appropriately
                if (previewElement) previewElement.appendChild(img);
            }
            reader.readAsDataURL(input.files[0]);
        }
    }

    function openEditQuiz(id) {
        const row = document.getElementById(`quiz-${id}`);
        if (!row || !editQuizModalEl) return;

        const editButton = row.querySelector('.btn-edit');
        const title = editButton?.dataset.title || '';
        const description = editButton?.dataset.desc || '';
        const categoryName = editButton?.dataset.category || '';
        const tags = editButton?.dataset.tags || '';

        // Get image URL from the data attribute
        const currentImageUrl = editButton?.dataset.image || 'https://placehold.co/100x100/e1e1e1/909090?text=No+Img';

        document.getElementById('editQuizId').value = id;
        document.getElementById('editQuizTitle').value = title;
        document.getElementById('editQuizDescription').value = description;
        document.getElementById('editQuizTags').value = tags;

        const categorySelect = document.getElementById('editQuizCategory');
        if (categorySelect) {
            const option = Array.from(categorySelect.options).find(opt => opt.text === categoryName);
            categorySelect.value = option ? option.value : '';
        }

        const currentImageElement = document.getElementById('currentQuizImage');
        if (currentImageElement) currentImageElement.src = currentImageUrl;

        editQuizModalEl.classList.add('show');
    }

    function openDeleteQuiz(id) {
        const row = document.getElementById(`quiz-${id}`);
        if (!row || !deleteQuizModalEl) return;
        currentQuizIdToDelete = id;
        console.log(`Opening delete modal for quiz ID: ${id}`);
        const title = row.querySelector('.quiz-title')?.innerText || 'this quiz';
        if (deleteQuizTitle) deleteQuizTitle.innerText = title;
        const deleteButton = deleteQuizModalEl.querySelector('#confirmDelete');
        if (deleteButton) deleteButton.disabled = false;
        deleteQuizModalEl.classList.add('show');
    }

    function updateQuizInTable(id, title, description, categoryName, tags) {
        const row = document.getElementById(`quiz-${id}`);
        if (row) {
            console.log(`Updating table row for quiz ID: ${id}`);
            const titleCell = row.querySelector('.quiz-title');
            const descCell = row.querySelector('.quiz-description');
            const catCell = row.querySelector('.quiz-category');
            const tagsCell = row.querySelector('.quiz-tags');
            const badgeCell = row.querySelector('.badge-updated');
            const editBtn = row.querySelector('.btn-edit');

            if (titleCell) titleCell.innerText = title;
            if (descCell) descCell.innerText = description;
            if (catCell) catCell.innerText = categoryName;
            if (tagsCell) tagsCell.innerText = tags || '';
            if (badgeCell) badgeCell.outerHTML = '<span class="badge-updated today">Just now</span>';

            if (editBtn) {
                editBtn.setAttribute('data-title', title);
                editBtn.setAttribute('data-desc', description);
                editBtn.setAttribute('data-category', categoryName);
                editBtn.setAttribute('data-tags', tags || '');
            }
        }
    }

    function deleteQuizFromTable(id) {
        const row = document.getElementById(`quiz-${id}`);
        if (row) {
            console.log(`Removing table row for quiz ID: ${id}`);
            row.remove();
        }
    }

    function getCurrentDate() {
        const today = new Date();
        const dd = String(today.getDate()).padStart(2, '0');
        const mm = String(today.getMonth() + 1).padStart(2, '0');
        const yy = String(today.getFullYear()).slice(-2);
        return `${dd}/${mm}/${yy}`;
    }

    function setupActionButtonsForRow(row) {
        const editButton = row.querySelector('.btn-edit');
        const deleteButton = row.querySelector('.btn-delete');

        if (!row.id) {
            console.error('Row is missing ID attribute');
            return;
        }

        const quizId = row.id.replace('quiz-', '');

        if (editButton) {
            editButton.addEventListener('click', function (e) {
                e.preventDefault();
                openEditQuiz(quizId);
            });
        }

        if (deleteButton) {
            deleteButton.addEventListener('click', function (e) {
                e.preventDefault();
                openDeleteQuiz(quizId);
            });
        }
    }

    function setupActionButtons() {
        if (quizTableBody) {
            const rows = quizTableBody.querySelectorAll('tr[id^="quiz-"]');
            rows.forEach(row => setupActionButtonsForRow(row));
        }
    }

    // --- Initialization ---
    console.log("Attempting to initialize quiz management...");


    // Attach Main Button Listener

    addQuizBtn.addEventListener('click', openAddQuizModal);


    // Attach Modal Close/Cancel Listeners
    modalCloseButtons.forEach(button => button.addEventListener('click', closeModals));
    modalCancelButtons.forEach(button => button.addEventListener('click', closeModals));

    // Attach Image Preview Listeners

    quizImageInput.addEventListener('change', function () { handleImagePreview(this, imagePreview); });

    // Replace the editQuizImageInput change event handler with this
    editQuizImageInput.addEventListener('change', async function () {
        const quizId = document.getElementById('editQuizId').value;
        const currentImageElement = document.getElementById('currentQuizImage');
        const files = this.files;
        const fileInput = this;

        if (!files || !files[0]) return;

        try {
            // Show SweetAlert2 confirmation dialog
            const result = await Swal.fire({
                title: 'Update Image?',
                text: "This will replace the current image immediately.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, update it!',
                cancelButtonText: 'Cancel'
            });

            if (result.isConfirmed) {
                // Show loading indicator in the preview area
                if (editImagePreview) {
                    editImagePreview.innerHTML = `
                    <div class="loading-indicator">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Uploading image...</p>
                    </div>
                `;
                }

                // Step 1: Create FormData for the image upload
                const formData = new FormData();
                formData.append('image', files[0]);  // 'image' matches the field name expected by your upload endpoint

                // Show loading state in SweetAlert
                Swal.fire({
                    title: 'Uploading...',
                    text: 'Please wait while we upload your image',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Step 2: Upload the image first
                const uploadResponse = await fetch('/media/upload-image', {
                    method: 'POST',
                    body: formData
                });

                if (!uploadResponse.ok) {
                    throw new Error('Failed to upload image');
                }

                const uploadResult = await uploadResponse.json();
                console.log('Upload result:', uploadResult);

                // Step 3: Update the quiz with the new media ID
                const updateResponse = await fetch(`/quiz/quizzes/${quizId}/update-media`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ image: uploadResult.imageUrl, public_id:uploadResult.publicId  })
                });

                if (!updateResponse.ok) {
                    throw new Error('Failed to update quiz with new image');
                }

                // Step 4: Update the UI with the new image URL
                if (editImagePreview) {
                    editImagePreview.innerHTML = '';
                    const img = document.createElement('img');
                    img.src = uploadResult.imageUrl;  
                    img.alt = "Quiz image";
                    img.className = "preview-image";
                    editImagePreview.appendChild(img);

                    // Also update the current image
                    if (currentImageElement) {
                        currentImageElement.src = uploadResult.url;
                    }

                    // Also update the table row's image if needed
                    const quizImage = document.querySelector(`#quiz-${quizId} .quiz-thumbnail`);
                    if (quizImage) {
                        quizImage.src = uploadResult.url;
                    }

                    // Update the edit button's data attribute
                    const editButton = document.querySelector(`#quiz-${quizId} .btn-edit`);
                    if (editButton) {
                        editButton.dataset.image = uploadResult.url;
                    }
                }

                Swal.fire({
                    title: 'Success!',
                    text: 'Image updated successfully',
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false
                });
            } else {
                // User cancelled, reset the file input
                fileInput.value = '';
            }
        } catch (error) {
            console.error('Error updating image:', error);

            // Show error with SweetAlert
            Swal.fire({
                title: 'Error!',
                text: error.message || 'Failed to update image',
                icon: 'error'
            });

            // Restore the original image preview in case of error
            if (editImagePreview && currentImageElement) {
                editImagePreview.innerHTML = '';
                const img = document.createElement('img');
                img.src = currentImageElement.src;
                img.alt = "Current quiz image";
                img.className = "preview-image";
                editImagePreview.appendChild(img);
            }

            // Reset the file input
            fileInput.value = '';
        }
    });



    // Attach Form Submit Listeners

    addQuizForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        const submitButton = addQuizForm.querySelector('.btn-submit');
        if (submitButton) submitButton.disabled = true;

        try {
            // Get the image file if one was selected
            const imageInput = document.getElementById('quizImage');
            const imageFile = imageInput.files && imageInput.files[0];
            let imageData = {};

            // If an image was selected, upload it first
            if (imageFile) {
                // Show loading indicator
                if (imagePreview) {
                    imagePreview.innerHTML = `
                    <div class="loading-indicator">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Uploading image...</p>
                    </div>`;
                }

                // Step 1: Create FormData for the image upload
                const formData = new FormData();
                formData.append('image', imageFile);

                // Show loading state
                Swal.fire({
                    title: 'Uploading...',
                    text: 'Please wait while we upload your image',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Upload the image
                const uploadResponse = await fetch('/media/upload-image', {
                    method: 'POST',
                    body: formData
                });

                if (!uploadResponse.ok) {
                    throw new Error('Failed to upload image');
                }

                const uploadResult = await uploadResponse.json();
                console.log('Upload result:', uploadResult);
                
                // Store the image data for quiz creation
                imageData = {
                    imageUrl: uploadResult.imageUrl,
                    public_id: uploadResult.publicId
                };

                Swal.close();
            }

            // Gather the quiz form data
            const quizFormData = {
                quizTitle: document.getElementById('quizTitle').value.trim(),
                quizDescription: document.getElementById('quizDescription').value.trim(),
                categoryId: document.getElementById('quizCategory').value,
                tags: document.getElementById('quizTags').value.trim(),
                // Include image data if available
                ...(Object.keys(imageData).length > 0 && imageData)
            };

            // Create the quiz with the image (if provided)
            const response = await fetch('/quiz/quizzes', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(quizFormData)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.error || 'Failed to create quiz');
            }

            // Show success message
            showToast('Quiz created successfully!');

            // Reset form and close modal
            addQuizForm.reset();
            closeModals();

            // Wait for toast to be visible before redirecting
            setTimeout(() => {
                if (result.redirectUrl) {
                    window.location.href = result.redirectUrl;
                }
            }, 1500); // Wait 1.5 seconds before redirecting

        } catch (error) {
            console.error('Error during fetch:', error);
            showToast(error.message || 'Failed to create quiz', true);
        } finally {
            if (submitButton) submitButton.disabled = false;
        }
    });



    editQuizForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        const id = document.getElementById('editQuizId').value;

        try {
            const formData = {
                quizTitle: document.getElementById('editQuizTitle').value.trim(),
                quizDescription: document.getElementById('editQuizDescription').value.trim(),
                categoryId: document.getElementById('editQuizCategory').value,
                tag: document.getElementById('editQuizTags').value.trim()
            };

            const response = await fetch(`/quiz/quizzes/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to update quiz');
            }

            const result = await response.json();

            // Update the table row with new data
            const row = document.getElementById(`quiz-${id}`);
            if (row) {
                const categorySelect = document.getElementById('editQuizCategory');
                const categoryName = categorySelect.options[categorySelect.selectedIndex].text;

                row.querySelector('.quiz-title').textContent = formData.quizTitle;
                row.querySelector('.quiz-description').textContent = formData.quizDescription;
                row.querySelector('.quiz-category').textContent = categoryName;
                row.querySelector('.quiz-tags').textContent = formData.tag;
                row.querySelector('.badge-updated').outerHTML = '<span class="badge-updated today">Just now</span>';

                // Update data attributes for future edits
                const editButton = row.querySelector('.btn-edit');
                if (editButton) {
                    editButton.dataset.title = formData.quizTitle;
                    editButton.dataset.desc = formData.quizDescription;
                    editButton.dataset.category = categoryName;
                    editButton.dataset.tags = formData.tag;
                }
            }

            showToast('Quiz updated successfully');
            closeModals();
        } catch (error) {
            console.error('Error updating quiz:', error);
            showToast(error.message || 'Failed to update quiz', true);
        }
    });


    confirmDeleteBtn.addEventListener('click', async function () {
        if (!currentQuizIdToDelete) return;
        const deleteButton = this;
        deleteButton.disabled = true;
        showToast('Deleting quiz...');
        try {
            // api
            const response = await fetch(`/quiz/quizzes/${currentQuizIdToDelete}`, { method: 'DELETE' });
            if (response.ok) {
                const result = await response.json();
                deleteQuizFromTable(currentQuizIdToDelete); // Remove row from table
                closeModals();
                showToast(result.message || 'Quiz deleted successfully!');
                currentQuizIdToDelete = null; // Reset ID
            } else {
                const errorData = await response.json().catch(() => ({ error: 'Deletion failed.' }));
                showToast(`Error: ${errorData.error || response.statusText}`, true);
            }
        } catch (error) { showToast('An error occurred.', true); }
        finally { deleteButton.disabled = false; }
    });
    console.log("Confirm delete button listener attached.");


    // Setup table action buttons
    setupActionButtons();

    console.log("Quiz Management Initialized.");


</script>
{{/section}}