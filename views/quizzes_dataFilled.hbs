{{#section 'css'}}
<link rel="stylesheet" href="/css/admin.css">
{{/section}}


<div class="content-wrapper">
    <div class="page-header">
        <div class="page-title">
            <h1>Quizzes</h1>
            <p>Manage your quizzes and questions</p>
        </div>
        <button class="btn-add-quiz" id="addQuizBtn">
            <i class="fas fa-plus"></i>
            Add Quiz
        </button>
    </div>

    <div class="table-responsive">
        <table class="quiz-table">
            <thead>
                <tr>
                    <th class="column-small">#</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Category</th>
                    <th>Tags</th>
                    <th>Image</th>
                    <th>Created at</th>
                    <th>Updated</th>
                    <th>Actions</th>
                    <th>Questions</th>
                </tr>
            </thead>
            <tbody id="quizTableBody">
                <tr id="quiz-1">
                    <td>1</td>
                    <td class="quiz-title">Táo Quân</td>
                    <td class="quiz-description">ha ha</td>
                    <td class="quiz-category">Entertainment</td>
                    <td class="quiz-tags">comedy, television</td>
                    <td class="quiz-image"><img src="/api/placeholder/40/40" alt="Quiz thumbnail" class="quiz-thumbnail"></td>
                    <td>18/03/25</td>
                    <td><span class="badge-updated">2 days ago</span></td>
                    <td class="actions-cell">
                        <button class="btn-edit" data-id="1" data-title="Táo Quân" data-desc="ha ha" data-category="Entertainment" data-tags="comedy, television">
                            <i class="fas fa-edit"></i>
                            Edit
                        </button>
                        <button class="btn-delete" data-id="1" data-title="Táo Quân">Delete</button>
                    </td>
                    <td>
                        <a href="/admin/quizzes/1/addquestion" class="btn-go">
                            <i class="fas fa-question-circle"></i>
                            Go
                        </a>
                    </td>
                </tr>
                <tr id="quiz-2">
                    <td>2</td>
                    <td class="quiz-title">33</td>
                    <td class="quiz-description">33</td>
                    <td class="quiz-category">Math</td>
                    <td class="quiz-tags">numbers</td>
                    <td class="quiz-image"><img src="/api/placeholder/40/40" alt="Quiz thumbnail" class="quiz-thumbnail"></td>
                    <td>18/03/25</td>
                    <td><span class="badge-updated today">Today</span></td>
                    <td class="actions-cell">
                        <button class="btn-edit" data-id="2" data-title="33" data-desc="33" data-category="Math" data-tags="numbers">
                            <i class="fas fa-edit"></i>
                            Edit
                        </button>
                        <button class="btn-delete" data-id="2" data-title="33">Delete</button>
                    </td>
                    <td>
                        <a href="/admin/quizzes/2/addquestion" class="btn-go">
                            <i class="fas fa-question-circle"></i>
                            Go
                        </a>
                    </td>
                </tr>
                <tr id="quiz-3">
                    <td>3</td>
                    <td class="quiz-title">te</td>
                    <td class="quiz-description">wew</td>
                    <td class="quiz-category">General</td>
                    <td class="quiz-tags">test</td>
                    <td class="quiz-image"><img src="/api/placeholder/40/40" alt="Quiz thumbnail" class="quiz-thumbnail"></td>
                    <td>18/03/25</td>
                    <td><span class="badge-updated">10 days ago</span></td>
                    <td class="actions-cell">
                        <button class="btn-edit" data-id="3" data-title="te" data-desc="wew" data-category="General" data-tags="test">
                            <i class="fas fa-edit"></i>
                            Edit
                        </button>
                        <button class="btn-delete" data-id="3" data-title="te">Delete</button>
                    </td>
                    <td>
                        <a href="/admin/quizzes/3/addquestion" class="btn-go">
                            <i class="fas fa-question-circle"></i>
                            Go
                        </a>
                    </td>
                </tr>
                <tr id="quiz-4">
                    <td>4</td>
                    <td class="quiz-title">1</td>
                    <td class="quiz-description">1</td>
                    <td class="quiz-category">Other</td>
                    <td class="quiz-tags">simple</td>
                    <td class="quiz-image"><img src="/api/placeholder/40/40" alt="Quiz thumbnail" class="quiz-thumbnail"></td>
                    <td>18/03/25</td>
                    <td><span class="badge-updated">10 days ago</span></td>
                    <td class="actions-cell">
                        <button class="btn-edit" data-id="4" data-title="1" data-desc="1" data-category="Other" data-tags="simple">
                            <i class="fas fa-edit"></i>
                            Edit
                        </button>
                        <button class="btn-delete" data-id="4" data-title="1">Delete</button>
                    </td>
                    <td>
                        <a href="/admin/quizzes/4/addquestion" class="btn-go">
                            <i class="fas fa-question-circle"></i>
                            Go
                        </a>
                    </td>
                </tr>
                <tr id="quiz-5">
                    <td>5</td>
                    <td class="quiz-title">Vòng quanh thế giới</td>
                    <td class="quiz-description">chuyến đi dài</td>
                    <td class="quiz-category">Geography</td>
                    <td class="quiz-tags">travel, world</td>
                    <td class="quiz-image"><img src="/api/placeholder/40/40" alt="Quiz thumbnail" class="quiz-thumbnail"></td>
                    <td>20/03/25</td>
                    <td><span class="badge-updated">4 days ago</span></td>
                    <td class="actions-cell">
                        <button class="btn-edit" data-id="5" data-title="Vòng quanh thế giới" data-desc="chuyến đi dài" data-category="Geography" data-tags="travel, world">
                            <i class="fas fa-edit"></i>
                            Edit
                        </button>
                        <button class="btn-delete" data-id="5" data-title="Vòng quanh thế giới">Delete</button>
                    </td>
                    <td>
                        <a href="/admin/quizzes/5/addquestion" class="btn-go">
                            <i class="fas fa-question-circle"></i>
                            Go
                        </a>
                    </td>
                </tr>
                <tr id="quiz-6">
                    <td>6</td>
                    <td class="quiz-title">Thế giới nayyy</td>
                    <td class="quiz-description">hia</td>
                    <td class="quiz-category">Geography</td>
                    <td class="quiz-tags">world</td>
                    <td class="quiz-image"><img src="/api/placeholder/40/40" alt="Quiz thumbnail" class="quiz-thumbnail"></td>
                    <td>20/03/25</td>
                    <td><span class="badge-updated">8 days ago</span></td>
                    <td class="actions-cell">
                        <button class="btn-edit" data-id="6" data-title="Thế giới nayyy" data-desc="hia" data-category="Geography" data-tags="world">
                            <i class="fas fa-edit"></i>
                            Edit
                        </button>
                        <button class="btn-delete" data-id="6" data-title="Thế giới nayyy">Delete</button>
                    </td>
                    <td>
                        <a href="/admin/quizzes/6/addquestion" class="btn-go">
                            <i class="fas fa-question-circle"></i>
                            Go
                        </a>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<div id="addQuizModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Add New Quiz</h2>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <form id="addQuizForm">
                <div class="form-group">
                    <label for="quizTitle">Title</label>
                    <input type="text" id="quizTitle" name="quizTitle" required>
                </div>
                <div class="form-group">
                    <label for="quizDescription">Description</label>
                    <textarea id="quizDescription" name="quizDescription" rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label for="quizCategory">Category</label>
                    <select id="quizCategory" name="categoryId" required>
                        <option value="">Select a category</option>
                        <option value="1">Academic</option>
                        <option value="2">Entertainment</option>
                        <option value="3">Professional</option>
                        <option value="4">Personality</option>
                        <option value="5">Knowledge</option>
                        <option value="6">Education</option>
                        <option value="7">Language</option>
                        <option value="8">Technical</option>
                        <option value="9">Health</option>
                        <option value="10">Trivia</option>
                        <option value="Entertainment">Entertainment</option> <option value="Math">Math</option> <option value="Science">Science</option> <option value="Geography">Geography</option> <option value="History">History</option> <option value="Sports">Sports</option> <option value="Literature">Literature</option> <option value="General">General</option> <option value="Other">Other</option> </select>
                </div>
                <div class="form-group">
                    <label for="quizTags">Tags (Optional)</label>
                    <input type="text" id="quizTags" name="quizTags" placeholder="Enter tags separated by commas">
                </div>
                <div class="form-group">
                    <label for="quizImage">Image (Optional)</label>
                    <div class="image-upload-container">
                         <input type="file" id="quizImage" name="quizMedia" accept="image/*">
                        <div class="image-preview" id="imagePreview"></div>
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-cancel">Cancel</button>
                    <button type="submit" class="btn-submit">Add Quiz & Go to Questions</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div id="editQuizModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Edit Quiz</h2>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <form id="editQuizForm">
                <input type="hidden" id="editQuizId" name="quizId">
                <div class="form-group">
                    <label for="editQuizTitle">Title</label>
                    <input type="text" id="editQuizTitle" name="quizTitle" required>
                </div>
                <div class="form-group">
                    <label for="editQuizDescription">Description</label>
                    <textarea id="editQuizDescription" name="quizDescription" rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label for="editQuizCategory">Category</label>
                    <select id="editQuizCategory" name="categoryId" required>
                        <option value="">Select a category</option>
                        <option value="1">Academic</option>
                        <option value="2">Entertainment</option>
                        <option value="3">Professional</option>
                        <option value="4">Personality</option>
                        <option value="5">Knowledge</option>
                        <option value="6">Education</option>
                        <option value="7">Language</option>
                        <option value="8">Technical</option>
                        <option value="9">Health</option>
                        <option value="10">Trivia</option>
                        <option value="Entertainment">Entertainment</option> <option value="Math">Math</option> <option value="Science">Science</option> <option value="Geography">Geography</option> <option value="History">History</option> <option value="Sports">Sports</option> <option value="Literature">Literature</option> <option value="General">General</option> <option value="Other">Other</option> </select>
                </div>
                <div class="form-group">
                    <label for="editQuizTags">Tags</label>
                    <input type="text" id="editQuizTags" name="quizTags" placeholder="Enter tags separated by commas">
                </div>
                <div class="form-group">
                    <label for="editQuizImage">Image</label>
                    <div class="image-upload-container">
                        <input type="file" id="editQuizImage" name="quizMedia" accept="image/*">
                        <div class="image-preview" id="editImagePreview">
                            <img id="currentQuizImage" src="https://placehold.co/100x100/e1e1e1/909090?text=Current" alt="Current quiz image">
                        </div>
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-cancel">Cancel</button>
                    <button type="submit" class="btn-submit">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div id="deleteQuizModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Delete Quiz</h2>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <p>Are you sure you want to delete the quiz "<span id="deleteQuizTitle"></span>"?</p>
            <p class="warning-text">This action cannot be undone.</p>
            <div class="form-actions">
                <button type="button" class="btn-cancel">Cancel</button>
                <button type="button" id="confirmDelete" class="btn-delete-confirm">Delete</button>
            </div>
        </div>
    </div>
</div>

<div id="toastNotification" class="toast">
    <div class="toast-content">
        <i class="fas fa-check-circle"></i>
        <div class="toast-message">
            <span id="toastMessage">Action completed successfully!</span>
        </div>
    </div>
    <div class="toast-progress"></div>
</div>

<script>
    // DOM Elements (references remain the same)
    const addQuizBtn = document.getElementById('addQuizBtn');
    const addQuizModal = document.getElementById('addQuizModal');
    const editQuizModal = document.getElementById('editQuizModal');
    const deleteQuizModal = document.getElementById('deleteQuizModal');
    const toastNotification = document.getElementById('toastNotification');
    const addQuizForm = document.getElementById('addQuizForm');
    const editQuizForm = document.getElementById('editQuizForm');
    const deleteQuizTitle = document.getElementById('deleteQuizTitle');
    const confirmDeleteBtn = document.getElementById('confirmDelete');
    const quizTableBody = document.getElementById('quizTableBody');
    const closeButtons = document.querySelectorAll('.modal .close, .modal .btn-cancel');
    const toastMessage = document.getElementById('toastMessage');
    const imagePreview = document.getElementById('imagePreview');
    const editImagePreview = document.getElementById('editImagePreview');
    const quizImageInput = document.getElementById('quizImage');
    const editQuizImageInput = document.getElementById('editQuizImage');

    let currentQuizIdToDelete = null;

    // Add Event Listeners (remain the same)
    if (addQuizBtn) {
        addQuizBtn.addEventListener('click', openAddQuizModal);
    }
    closeButtons.forEach(button => {
        button.addEventListener('click', closeModals);
    });

    if (quizImageInput) {
        quizImageInput.addEventListener('change', function() {
            handleImagePreview(this, imagePreview);
        });
    }
    if (editQuizImageInput) {
        editQuizImageInput.addEventListener('change', function() {
            const currentImageElement = document.getElementById('currentQuizImage');
            handleImagePreview(this, editImagePreview, currentImageElement);
        });
    }

    setupActionButtons();

    // --- MODIFICATION: Add Quiz Form Submit using Fetch ---
    if (addQuizForm) {
        addQuizForm.addEventListener('submit', async function(e) { // Made async
            e.preventDefault(); // Keep preventing default browser submission

            const formData = new FormData(addQuizForm); // Create FormData from the form

            // Optional: Add client-side validation here if needed before sending

            // Show loading state? (e.g., disable submit button)
            const submitButton = addQuizForm.querySelector('.btn-submit');
            if (submitButton) submitButton.disabled = true;

            try {
                const response = await fetch('/quizzes', { // Send POST request to backend
                    method: 'POST',
                    body: formData,
                    // Headers are generally not needed for FormData with fetch,
                    // but add if your backend requires specific headers (e.g., CSRF token)
                    // headers: { 'X-CSRF-Token': 'YOUR_TOKEN_HERE' }
                });

                // Check if the response indicates success (status 2xx) or if it's a redirect (status 3xx)
                // fetch handles redirects automatically by default ('follow').
                // If the server successfully processes and redirects, the browser handles it.
                // We only need to check if the initial POST was successful or resulted in an error.

                if (response.ok || (response.status >= 300 && response.status < 400)) {
                    // If the request was successful OR it's a redirect, let the browser handle it.
                    console.log('Quiz creation initiated. Redirect (if any) should follow.');
                    // No client-side redirect needed.
                    // Modal will close automatically upon page navigation.
                    // No success toast needed as the page context changes.

                    // If the server *doesn't* redirect but sends back a 2xx status (e.g., 201 Created with JSON),
                    // you might need to handle that response here if you change the backend later.
                    // Example:
                    // if (response.status === 201) {
                    //    const data = await response.json();
                    //    window.location.href = `/admin/quizzes/${data.quizId}/addquestion`; // Manual redirect
                    // }

                } else {
                    // Handle client errors (4xx) or server errors (5xx)
                    const errorData = await response.json().catch(() => ({ error: 'An unknown error occurred.' }));
                    console.error('Failed to create quiz:', response.status, errorData);
                    showToast(`Error: ${errorData.error || response.statusText || 'Could not create quiz.'}`);
                    // Re-enable submit button on error
                    if (submitButton) submitButton.disabled = false;
                }
            } catch (error) {
                // Handle network errors or other exceptions during fetch
                console.error('Error submitting add quiz form:', error);
                showToast('A network error occurred. Please try again.');
                // Re-enable submit button on error
                if (submitButton) submitButton.disabled = false;
            }
        });
    }
    // --- END OF MODIFICATION ---


    // Edit Quiz Form Submit (Requires AJAX/Fetch for PUT - remains the same)
    if (editQuizForm) {
        editQuizForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const id = document.getElementById('editQuizId').value;
            const formData = new FormData(this);
            const submitButton = editQuizForm.querySelector('.btn-submit');
            if (submitButton) submitButton.disabled = true;

            try {
                const response = await fetch(`/quizzes/${id}`, { // Ensure PUT route exists
                    method: 'PUT',
                    body: formData
                });
                if (response.ok) {
                    const result = await response.json();
                    // Find category text based on selected value for table update
                    const categorySelect = document.getElementById('editQuizCategory');
                    const selectedCategoryValue = formData.get('categoryId');
                    let categoryText = selectedCategoryValue; // Default if not found
                    if (categorySelect && selectedCategoryValue) {
                        const selectedOption = categorySelect.querySelector(`option[value="${selectedCategoryValue}"]`);
                        if (selectedOption) {
                            categoryText = selectedOption.text;
                        }
                    }
                    // Update table using retrieved/derived data
                    updateQuizInTable(id,
                        formData.get('quizTitle'),
                        formData.get('quizDescription'),
                        categoryText, // Pass the text representation
                        formData.get('quizTags')
                     );
                    closeModals();
                    showToast(result.message || 'Quiz updated successfully!');
                } else {
                     const errorData = await response.json().catch(() => ({ error: 'Update failed.' }));
                     console.error('Failed to update quiz:', errorData);
                     showToast(`Error: ${errorData.error || response.statusText}`);
                }
            } catch (error) {
                console.error('Error submitting edit form:', error);
                showToast('An error occurred while updating the quiz.');
            } finally {
                 if (submitButton) submitButton.disabled = false;
            }
        });
    }

    // Confirm Delete Button (Requires AJAX/Fetch for DELETE - remains the same)
    if (confirmDeleteBtn) {
        confirmDeleteBtn.addEventListener('click', async function() {
            if (currentQuizIdToDelete) {
                 const deleteButton = this;
                 deleteButton.disabled = true;
                 try {
                     const response = await fetch(`/quizzes/${currentQuizIdToDelete}`, { // Ensure DELETE route exists
                         method: 'DELETE'
                     });
                     if (response.ok) {
                         const result = await response.json();
                         deleteQuizFromTable(currentQuizIdToDelete);
                         closeModals();
                         showToast(result.message || 'Quiz deleted successfully!');
                         currentQuizIdToDelete = null;
                     } else {
                         const errorData = await response.json().catch(() => ({ error: 'Deletion failed.' }));
                         console.error('Failed to delete quiz:', errorData);
                         showToast(`Error: ${errorData.error || response.statusText}`);
                     }
                 } catch (error) {
                     console.error('Error submitting delete request:', error);
                     showToast('An error occurred while deleting the quiz.');
                 } finally {
                      deleteButton.disabled = false;
                 }
            }
        });
    }

    // Functions (Helper functions remain the same)
    function openAddQuizModal() {
        if (addQuizModal) addQuizModal.classList.add('show');
        if (addQuizForm) addQuizForm.reset();
        if (imagePreview) imagePreview.innerHTML = '';
        const submitButton = addQuizForm?.querySelector('.btn-submit');
         if (submitButton) submitButton.disabled = false;
    }

    function openEditQuiz(id) {
        const row = document.getElementById(`quiz-${id}`);
        if (!row || !editQuizModal) return;
        // Get data primarily from data-* attributes for reliability if possible
        // Fallback to innerText
        const editButton = row.querySelector('.btn-edit');
        const title = editButton?.getAttribute('data-title') || row.querySelector('.quiz-title')?.innerText || '';
        const description = editButton?.getAttribute('data-desc') || row.querySelector('.quiz-description')?.innerText || '';
        const categoryName = editButton?.getAttribute('data-category') || row.querySelector('.quiz-category')?.innerText || ''; // Get category name
        const tags = editButton?.getAttribute('data-tags') || row.querySelector('.quiz-tags')?.innerText || '';
        const currentImageUrl = row.querySelector('.quiz-thumbnail')?.src || 'https://placehold.co/100x100/e1e1e1/909090?text=Current';

        document.getElementById('editQuizId').value = id;
        document.getElementById('editQuizTitle').value = title;
        document.getElementById('editQuizDescription').value = description;
        // Set category dropdown based on category *name*
        const categorySelect = document.getElementById('editQuizCategory');
        let categoryFound = false;
        for (let i = 0; i < categorySelect.options.length; i++) {
             if (categorySelect.options[i].text === categoryName) {
                 categorySelect.value = categorySelect.options[i].value;
                 categoryFound = true;
                 break;
             }
        }
         if (!categoryFound) categorySelect.value = ""; // Reset if no match

        document.getElementById('editQuizTags').value = tags;
         const currentImageElement = document.getElementById('currentQuizImage');
         if (currentImageElement) {
             currentImageElement.src = currentImageUrl;
             editImagePreview.innerHTML = '';
             editImagePreview.appendChild(currentImageElement);
         }
         if(editQuizImageInput) editQuizImageInput.value = ''; // Clear file input

         const submitButton = editQuizForm?.querySelector('.btn-submit');
         if (submitButton) submitButton.disabled = false;

        editQuizModal.classList.add('show');
    }

    function openDeleteQuiz(id) {
         const row = document.getElementById(`quiz-${id}`);
         if (!row || !deleteQuizModal) return;
        currentQuizIdToDelete = id;
        const title = row.querySelector('.quiz-title')?.innerText || 'this quiz';
        if (deleteQuizTitle) deleteQuizTitle.innerText = title;
        const deleteButton = deleteQuizModal.querySelector('#confirmDelete');
        if(deleteButton) deleteButton.disabled = false;

        deleteQuizModal.classList.add('show');
    }

    function closeModals() {
        if (addQuizModal) addQuizModal.classList.remove('show');
        if (editQuizModal) editQuizModal.classList.remove('show');
        if (deleteQuizModal) deleteQuizModal.classList.remove('show');
    }

    function showToast(message) {
        if (!toastNotification || !toastMessage) return;
        toastMessage.innerText = message;
        toastNotification.classList.add('show');
        const progress = toastNotification.querySelector('.toast-progress');
        if (progress) {
            progress.style.animation = 'none';
            progress.offsetHeight;
            progress.style.animation = '';
        }
        setTimeout(() => {
            toastNotification.classList.remove('show');
        }, 3000);
    }

     function handleImagePreview(input, previewElement, existingImageElement = null) {
         if (input.files && input.files[0]) {
             const reader = new FileReader();
             reader.onload = function(e) {
                 const img = document.createElement('img');
                 img.src = e.target.result;
                 img.alt = "Image preview";
                 img.className = "preview-image";
                 previewElement.innerHTML = '';
                 previewElement.appendChild(img);
             }
             reader.readAsDataURL(input.files[0]);
         } else if (existingImageElement) {
             previewElement.innerHTML = '';
             previewElement.appendChild(existingImageElement);
         } else {
             previewElement.innerHTML = '';
         }
     }

    function addQuizToTable(id, title, description, categoryName, tags) {
        // This function is kept for potential use with edit/update,
        // but is NOT called directly by the Add Quiz form submit anymore due to redirect.
        const row = document.createElement('tr');
        row.id = `quiz-${id}`;
        // Use categoryName directly as passed
        row.innerHTML = `
            <td>${id}</td>
            <td class="quiz-title">${title}</td>
            <td class="quiz-description">${description}</td>
            <td class="quiz-category">${categoryName}</td>
            <td class="quiz-tags">${tags}</td>
            <td class="quiz-image"><img src="https://placehold.co/40x40/e1e1e1/909090?text=Q" alt="Quiz thumbnail" class="quiz-thumbnail"></td>
            <td>${getCurrentDate()}</td>
            <td><span class="badge-updated today">Today</span></td>
            <td class="actions-cell">
                <button class="btn-edit" data-id="${id}" data-title="${title}" data-desc="${description}" data-category="${categoryName}" data-tags="${tags}">
                    <i class="fas fa-edit"></i>Edit
                </button>
                <button class="btn-delete" data-id="${id}" data-title="${title}">Delete</button>
            </td>
            <td>
                <a href="/admin/quizzes/${id}/addquestion" class="btn-go">
                    <i class="fas fa-question-circle"></i>Go
                </a>
            </td>
        `;
        if (quizTableBody) {
             quizTableBody.appendChild(row);
             setupActionButtonsForRow(row); // Assign events to new buttons
        }
    }

    // Updated to accept categoryName directly
    function updateQuizInTable(id, title, description, categoryName, tags) {
        const row = document.getElementById(`quiz-${id}`);
        if (row) {
            // Use the passed categoryName
            row.querySelector('.quiz-title').innerText = title;
            row.querySelector('.quiz-description').innerText = description;
            row.querySelector('.quiz-category').innerText = categoryName; // Update with name
            row.querySelector('.quiz-tags').innerText = tags;
            const badge = row.querySelector('.badge-updated');
            if (badge) { badge.innerText = "Just now"; badge.className = "badge-updated today"; }
             const editBtn = row.querySelector('.btn-edit');
             if(editBtn) {
                 editBtn.setAttribute('data-title', title);
                 editBtn.setAttribute('data-desc', description);
                 editBtn.setAttribute('data-category', categoryName); // Update data attribute with name
                 editBtn.setAttribute('data-tags', tags);
             }
        }
    }

    function deleteQuizFromTable(id) {
        const row = document.getElementById(`quiz-${id}`);
        if (row) { row.remove(); }
    }

    function getCurrentDate() {
        const today = new Date();
        const dd = String(today.getDate()).padStart(2, '0');
        const mm = String(today.getMonth() + 1).padStart(2, '0');
        const yy = String(today.getFullYear()).slice(-2);
        return `${dd}/${mm}/${yy}`;
    }

     function setupActionButtonsForRow(row) {
         const editButton = row.querySelector('.btn-edit');
         const deleteButton = row.querySelector('.btn-delete');
         if (editButton) {
             editButton.addEventListener('click', () => {
                 const id = editButton.getAttribute('data-id'); openEditQuiz(id);
             });
         }
         if (deleteButton) {
             deleteButton.addEventListener('click', () => {
                 const id = deleteButton.getAttribute('data-id'); openDeleteQuiz(id);
             });
         }
     }

    function setupActionButtons() {
         if (quizTableBody) {
             quizTableBody.querySelectorAll('tr').forEach(row => {
                 setupActionButtonsForRow(row);
             });
         }
    }
</script>
