{{#section 'css'}}
<link rel="stylesheet" href="/css/admin.css">
{{/section}}

<div class="content-wrapper">
    <div class="page-header">
        <div class="page-title">
            <h1>{{pageTitle}}</h1>
            <p>Manage your quizzes and questions</p>
        </div>
        <button class="btn-add-quiz" id="addQuizBtn">
            <i class="fas fa-plus"></i>
            Add Quiz
        </button>
    </div>

    <div class="table-responsive">
        <table class="quiz-table">
            <thead>
                <tr>
                    <th class="column-small">#</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Category</th>
                    <th>Tags</th>
                    {{!-- Removed Image Header --}}
                    <th>Created at</th>
                    <th>Updated</th>
                    <th>Actions</th>
                    <th>Questions</th>
                </tr>
            </thead>
            <tbody id="quizTableBody">
                {{#if quizzes}}
                    {{#each quizzes}}
                        <tr id="quiz-{{this.id}}">
                            <td>{{this.rowNumber}}</td>
                            <td class="quiz-title">{{this.title}}</td>
                            <td class="quiz-description">{{this.description}}</td>
                            <td class="quiz-category">{{this.categoryName}}</td>
                            <td class="quiz-tags">{{this.tagsString}}</td>
                            {{!-- Removed Image Data Cell --}}
                            <td>{{this.formattedCreatedAt}}</td>
                            <td>
                                <span class="badge-updated {{#if (or (eq this.relativeUpdatedAt 'a few seconds ago') (eq this.relativeUpdatedAt 'in a few seconds'))}}today{{/if}}">
                                    {{this.relativeUpdatedAt}}
                                </span>
                            </td>
                            <td class="actions-cell">
                                <button class="btn-edit"
                                        data-id="{{this.id}}"
                                        data-title="{{this.title}}"
                                        data-desc="{{this.description}}"
                                        data-category="{{this.categoryName}}"
                                        data-tags="{{this.tagsString}}">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button class="btn-delete" data-id="{{this.id}}" data-title="{{this.title}}">
                                    Delete
                                </button>
                            </td>
                            <td>
                                <a href="/admin/quizzes/{{this.id}}/addquestion" class="btn-go">
                                    <i class="fas fa-question-circle"></i> Go
                                </a>
                            </td>
                        </tr>
                    {{/each}}
                {{else}}
                    {{!-- Adjusted colspan from 10 to 9 --}}
                    <tr>
                        <td colspan="9" style="text-align: center; padding: 20px;">No quizzes found.</td>
                    </tr>
                {{/if}}
            </tbody>
        </table>
    </div>
</div>

<div id="addQuizModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Add New Quiz</h2>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <form id="addQuizForm" enctype="multipart/form-data">
                 <div class="form-group">
                    <label for="quizTitle">Title</label>
                    <input type="text" id="quizTitle" name="quizTitle" required>
                </div>
                <div class="form-group">
                    <label for="quizDescription">Description</label>
                    <textarea id="quizDescription" name="quizDescription" rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label for="quizCategory">Category</label>
                    <select id="quizCategory" name="categoryId" required>
                        <option value="">Select a category</option>
                        <option value="1">Academic</option>
                        <option value="2">Entertainment</option>
                        <option value="3">Professional</option>
                        <option value="4">Personality</option>
                        <option value="5">Knowledge</option>
                        <option value="6">Education</option>
                        <option value="7">Language</option>
                        <option value="8">Technical</option>
                        <option value="9">Health</option>
                        <option value="10">Trivia</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="quizTags">Tags</label>
                    <input type="text" id="quizTags" name="tag" placeholder="Enter tags separated by commas">
                </div>
                <div class="form-group">
                    <label for="quizImage">Image</label>
                    <div class="image-upload-container">
                        <input type="file" id="quizImage" name="quizMedia" accept="image/*">
                        <div class="image-preview" id="imagePreview"></div>
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-cancel">Cancel</button>
                    <button type="submit" class="btn-submit">Add Quiz & Go to Questions</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div id="editQuizModal" class="modal">
     <div class="modal-content">
        <div class="modal-header">
            <h2>Edit Quiz</h2>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <form id="editQuizForm">
                 <input type="hidden" id="editQuizId" name="quizId">
                <div class="form-group">
                    <label for="editQuizTitle">Title</label>
                    <input type="text" id="editQuizTitle" name="quizTitle" required>
                </div>
                <div class="form-group">
                    <label for="editQuizDescription">Description</label>
                    <textarea id="editQuizDescription" name="quizDescription" rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label for="editQuizCategory">Category</label>
                    <select id="editQuizCategory" name="categoryId" required>
                         <option value="">Select a category</option>
                         <option value="1">Academic</option>
                         <option value="2">Entertainment</option>
                         </select>
                </div>
                <div class="form-group">
                    <label for="editQuizTags">Tags</label>
                    <input type="text" id="editQuizTags" name="tag" placeholder="Enter tags separated by commas">
                </div>
                <div class="form-group">
                    <label for="editQuizImage">Image</label>
                    <div class="image-upload-container">
                        <input type="file" id="editQuizImage" name="quizMedia" accept="image/*">
                        <div class="image-preview" id="editImagePreview">
                            <img id="currentQuizImage" src="https://placehold.co/100x100/e1e1e1/909090?text=Current" alt="Current quiz image" class="preview-image">
                        </div>
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-cancel">Cancel</button>
                    <button type="submit" class="btn-submit">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div id="deleteQuizModal" class="modal">
     <div class="modal-content">
        <div class="modal-header">
            <h2>Delete Quiz</h2>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <p>Are you sure you want to delete the quiz "<span id="deleteQuizTitle"></span>"?</p>
            <p class="warning-text">This action cannot be undone.</p>
            <div class="form-actions">
                <button type="button" class="btn-cancel">Cancel</button>
                <button type="button" id="confirmDelete" class="btn-delete-confirm">Delete</button>
            </div>
        </div>
    </div>
</div>

<div id="toastNotification" class="toast">
    <div class="toast-content">
        <i class="fas fa-check-circle"></i>
        <div class="toast-message">
            <span id="toastMessage">Action completed successfully!</span>
        </div>
    </div>
    <div class="toast-progress"></div>
</div>


{{#section 'scripts'}}
<script>


    // --- DOM Element References ---
    const addQuizBtn = document.getElementById('addQuizBtn');
    const addQuizModalEl = document.getElementById('addQuizModal');
    const editQuizModalEl = document.getElementById('editQuizModal');
    const deleteQuizModalEl = document.getElementById('deleteQuizModal');
    const toastNotificationEl = document.getElementById('toastNotification');
    const addQuizForm = document.getElementById('addQuizForm');
    const editQuizForm = document.getElementById('editQuizForm');
    const deleteQuizTitle = document.getElementById('deleteQuizTitle');
    const confirmDeleteBtn = document.getElementById('confirmDelete');
    const quizTableBody = document.getElementById('quizTableBody');
    const modalCloseButtons = document.querySelectorAll('.modal .close');
    const modalCancelButtons = document.querySelectorAll('.modal .btn-cancel');
    const toastMessage = document.getElementById('toastMessage');
    const imagePreview = document.getElementById('imagePreview');
    const editImagePreview = document.getElementById('editImagePreview');
    const quizImageInput = document.getElementById('quizImage');
    const editQuizImageInput = document.getElementById('editQuizImage');

    // --- State Variable ---
    let currentQuizIdToDelete = null;

    // --- Helper Functions (Define BEFORE use) ---

    function showToast(message, isError = false) {
        if (!toastNotificationEl || !toastMessage) {
            console.warn('Toast elements not found, logging message:', message);
            alert(message); // Fallback
            return;
        }
        toastMessage.innerText = message;
        const icon = toastNotificationEl.querySelector('i');
        if (isError) {
            toastNotificationEl.style.backgroundColor = '#d9534f';
            if(icon) icon.className = 'fas fa-exclamation-circle text-white';
        } else {
            toastNotificationEl.style.backgroundColor = '#333';
            if(icon) icon.className = 'fas fa-check-circle text-success';
        }
        toastNotificationEl.classList.add('show');
        const progress = toastNotificationEl.querySelector('.toast-progress');
        if (progress) {
            progress.style.animation = 'none';
            progress.offsetHeight; /* trigger reflow */
            progress.style.animation = '';
        }
        setTimeout(() => {
            toastNotificationEl.classList.remove('show');
        }, 3000);
    }

    function closeModals() {
        console.log("Closing modals...");
        [addQuizModalEl, editQuizModalEl, deleteQuizModalEl].forEach(modal => {
            if (modal) modal.classList.remove('show');
        });
    }

    function openAddQuizModal() {
        console.log("Opening Add Quiz Modal...");
        addQuizModal.classList.add('show');
    }

    function handleImagePreview(input, previewElement) {
        if(previewElement) previewElement.innerHTML = '';
        if (input.files && input.files[0]) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const img = document.createElement('img');
                img.src = e.target.result;
                img.alt = "Image preview";
                img.className = "preview-image"; // Make sure this class styles the image appropriately
                if(previewElement) previewElement.appendChild(img);
            }
            reader.readAsDataURL(input.files[0]);
        }
    }

    function openEditQuiz(id) {
        const row = document.getElementById(`quiz-${id}`);
        if (!row || !editQuizModalEl) return;

        const editButton = row.querySelector('.btn-edit');
        const title = editButton?.dataset.title || '';
        const description = editButton?.dataset.desc || '';
        const categoryName = editButton?.dataset.category || '';
        const tags = editButton?.dataset.tags || '';
        const currentImageUrl = row.querySelector('.quiz-thumbnail')?.src || 'https://placehold.co/100x100/e1e1e1/909090?text=No+Img';

        document.getElementById('editQuizId').value = id;
        document.getElementById('editQuizTitle').value = title;
        document.getElementById('editQuizDescription').value = description;
        document.getElementById('editQuizTags').value = tags;

        const categorySelect = document.getElementById('editQuizCategory');
        if (categorySelect) {
            const option = Array.from(categorySelect.options).find(opt => opt.text === categoryName);
            categorySelect.value = option ? option.value : '';
        }

        const currentImageElement = document.getElementById('currentQuizImage');
        if (currentImageElement) currentImageElement.src = currentImageUrl;

        editQuizModalEl.classList.add('show');  
    }

    function openDeleteQuiz(id) {
        const row = document.getElementById(`quiz-${id}`);
        if (!row || !deleteQuizModalEl) return;
        currentQuizIdToDelete = id;
        console.log(`Opening delete modal for quiz ID: ${id}`);
        const title = row.querySelector('.quiz-title')?.innerText || 'this quiz';
        if (deleteQuizTitle) deleteQuizTitle.innerText = title;
        const deleteButton = deleteQuizModalEl.querySelector('#confirmDelete');
        if (deleteButton) deleteButton.disabled = false;
        deleteQuizModalEl.classList.add('show');
    }

    function updateQuizInTable(id, title, description, categoryName, tags) {
        const row = document.getElementById(`quiz-${id}`);
        if (row) {
            console.log(`Updating table row for quiz ID: ${id}`);
            const titleCell = row.querySelector('.quiz-title');
            const descCell = row.querySelector('.quiz-description');
            const catCell = row.querySelector('.quiz-category');
            const tagsCell = row.querySelector('.quiz-tags');
            const badgeCell = row.querySelector('.badge-updated');
            const editBtn = row.querySelector('.btn-edit');

            if(titleCell) titleCell.innerText = title;
            if(descCell) descCell.innerText = description;
            if(catCell) catCell.innerText = categoryName;
            if(tagsCell) tagsCell.innerText = tags || '';
            if(badgeCell) badgeCell.outerHTML = '<span class="badge-updated today">Just now</span>';

            if (editBtn) {
                editBtn.setAttribute('data-title', title);
                editBtn.setAttribute('data-desc', description);
                editBtn.setAttribute('data-category', categoryName);
                editBtn.setAttribute('data-tags', tags || '');
            }
        }
    }

    function deleteQuizFromTable(id) {
        const row = document.getElementById(`quiz-${id}`);
        if (row) {
            console.log(`Removing table row for quiz ID: ${id}`);
            row.remove();
        }
    }

    function getCurrentDate() {
        const today = new Date();
        const dd = String(today.getDate()).padStart(2, '0');
        const mm = String(today.getMonth() + 1).padStart(2, '0');
        const yy = String(today.getFullYear()).slice(-2);
        return `${dd}/${mm}/${yy}`;
    }

    function setupActionButtonsForRow(row) {
        const editButton = row.querySelector('.btn-edit');
        const deleteButton = row.querySelector('.btn-delete');
        
        if (!row.id) {
            console.error('Row is missing ID attribute');
            return;
        }
        
        const quizId = row.id.replace('quiz-', '');
        
        if (editButton) {
            editButton.addEventListener('click', function(e) {
                e.preventDefault();
                openEditQuiz(quizId);
            });
        }
        
        if (deleteButton) {
            deleteButton.addEventListener('click', function(e) {
                e.preventDefault();
                openDeleteQuiz(quizId);
            });
        }
    }

    function setupActionButtons() {
        if (quizTableBody) {
            const rows = quizTableBody.querySelectorAll('tr[id^="quiz-"]');
            rows.forEach(row => setupActionButtonsForRow(row));
        }
    }

    // --- Initialization ---
    console.log("Attempting to initialize quiz management...");

   
    // Attach Main Button Listener
   
    addQuizBtn.addEventListener('click', openAddQuizModal);
    

    // Attach Modal Close/Cancel Listeners
    modalCloseButtons.forEach(button => button.addEventListener('click', closeModals));
    modalCancelButtons.forEach(button => button.addEventListener('click', closeModals));
  
    // Attach Image Preview Listeners
   
    quizImageInput.addEventListener('change', function() { handleImagePreview(this, imagePreview); });

    editQuizImageInput.addEventListener('change', function() {
        const currentImageElement = document.getElementById('currentQuizImage');
        handleImagePreview(this, editImagePreview, currentImageElement);
    });
    

    // Attach Form Submit Listeners

        addQuizForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const submitButton = addQuizForm.querySelector('.btn-submit');
            if (submitButton) submitButton.disabled = true;

            const formData = {
                quizTitle: document.getElementById('quizTitle').value.trim(),
                quizDescription: document.getElementById('quizDescription').value.trim(),
                categoryId: document.getElementById('quizCategory').value,
                tags: document.getElementById('quizTags').value.trim()
            };

            try {
                const response = await fetch('/quiz/quizzes', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.error || 'Failed to create quiz');
                }

                // Show success message
                showToast('Quiz created successfully!');
                
                // Reset form and close modal
                addQuizForm.reset();
                closeModals();

                // Wait for toast to be visible before redirecting
                setTimeout(() => {
                    if (result.redirectUrl) {
                        window.location.href = result.redirectUrl;
                    }
                }, 1500); // Wait 1.5 seconds before redirecting

            } catch (error) {
                console.error('Error during fetch:', error);
                showToast(error.message || 'Failed to create quiz', true);
            } finally {
                if (submitButton) submitButton.disabled = false;
            }
        });
      
    


         editQuizForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const id = document.getElementById('editQuizId').value;
            if (!id) { showToast('Cannot update quiz: Missing ID.', true); return; }
            const formData = new FormData(this);
            const submitButton = editQuizForm.querySelector('.btn-submit');
            if (submitButton) submitButton.disabled = true;
            showToast('Updating quiz...');

            try {
                // *** IMPORTANT: Verify this URL matches your backend route ***
                const response = await fetch(`/quiz/quizzes/${id}`, {
                    method: 'PUT',
                    body: formData
                });
                if (response.ok) {
                    const result = await response.json();
                    const categorySelect = document.getElementById('editQuizCategory');
                    const selectedCategoryValue = formData.get('categoryId');
                    let categoryText = selectedCategoryValue;
                    if (categorySelect && selectedCategoryValue) {
                        const selectedOption = categorySelect.querySelector(`option[value="${selectedCategoryValue}"]`);
                        if (selectedOption) categoryText = selectedOption.text;
                    }
                    // Update table row with potentially new data
                    updateQuizInTable(id, formData.get('quizTitle'), formData.get('quizDescription'), categoryText, formData.get('tag'));
                    closeModals();
                    showToast(result.message || 'Quiz updated successfully!');
                } else {
                     const errorData = await response.json().catch(() => ({ error: 'Update failed.' }));
                     showToast(`Error: ${errorData.error || response.statusText}`, true);
                }
            } catch (error) { showToast('An error occurred.', true); }
            finally { if (submitButton) submitButton.disabled = false; }
        });
        console.log("Edit quiz form submit listener attached.");
    

 
        confirmDeleteBtn.addEventListener('click', async function() {
            if (!currentQuizIdToDelete) return;
            const deleteButton = this;
            deleteButton.disabled = true;
            showToast('Deleting quiz...');
            try {
                 // *** IMPORTANT: Verify this URL matches your backend route ***
                const response = await fetch(`/quiz/quizzes/${currentQuizIdToDelete}`, { method: 'DELETE' });
                if (response.ok) {
                    const result = await response.json();
                    deleteQuizFromTable(currentQuizIdToDelete); // Remove row from table
                    closeModals();
                    showToast(result.message || 'Quiz deleted successfully!');
                    currentQuizIdToDelete = null; // Reset ID
                } else {
                    const errorData = await response.json().catch(() => ({ error: 'Deletion failed.' }));
                    showToast(`Error: ${errorData.error || response.statusText}`, true);
                }
            } catch (error) { showToast('An error occurred.', true); }
            finally { deleteButton.disabled = false; }
        });
        console.log("Confirm delete button listener attached.");
    

    // Setup table action buttons
    setupActionButtons();

    console.log("Quiz Management Initialized.");


</script>
{{/section}}